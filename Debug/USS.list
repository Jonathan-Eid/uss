
USS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba4  08003ba4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba4  08003ba4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  08003c1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003c1c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a31  00000000  00000000  0002c966  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000964e  00000000  00000000  0002f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a91  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec5bb  00000000  00000000  00042acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f08a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  0012f108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b10 	.word	0x08003b10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b10 	.word	0x08003b10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <UART2_Init>:
// ===================================================
// PA.0 = UART4_TX (AF8)   |  PA.1 = UART4_RX (AF8)      
// PB.6 = USART1_TX (AF7)  |  PB.7 = USART1_RX (AF7) 
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void UART2_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <UART2_Init+0x40>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <UART2_Init+0x40>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <UART2_Init+0x40>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <UART2_Init+0x40>)
 8000a64:	f023 030c 	bic.w	r3, r3, #12
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <UART2_Init+0x40>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <UART2_Init+0x40>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000a7c:	f000 f80a 	bl	8000a94 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <UART2_Init+0x44>)
 8000a82:	f000 f843 	bl	8000b0c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40004400 	.word	0x40004400

08000a94 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIODEN;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <UART2_GPIO_Init+0x70>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <UART2_GPIO_Init+0x70>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PD5 = USART2_TX (AF7)
	// PD6 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOD->MODER   &= ~(0xF << (2*5));	// Clear bits
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000aaa:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000aae:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=   0xA << (2*5);      		
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ab6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000aba:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0]  |=   0x77<< (4*5);       	
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ac2:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 8000ac6:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOD->OSPEEDR |=   0xF<<(2*5); 					 	
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ace:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000ad2:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOD->PUPDR   &= ~(0xF<<(2*5));
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ada:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ade:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR   |=   0x5<<(2*5);    				
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000ae6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000aea:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOD->OTYPER  &=  ~(0x3<<5) ;       	
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <UART2_GPIO_Init+0x74>)
 8000af2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000af6:	6053      	str	r3, [r2, #4]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000c00 	.word	0x48000c00

08000b0c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 0201 	bic.w	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f242 028d 	movw	r2, #8333	; 0x208d
 8000b4a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f043 020c 	orr.w	r2, r3, #12
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <USART_Init+0xfc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d129      	bne.n	8000bb4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f043 0220 	orr.w	r2, r3, #32
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f023 0210 	bic.w	r2, r3, #16
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0201 	bic.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <USART_Init+0x100>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d10b      	bne.n	8000bd4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <USART_Init+0x104>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <USART_Init+0x104>)
 8000bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bd2:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f043 0201 	orr.w	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000be0:	bf00      	nop
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000bee:	bf00      	nop
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <USART_Init+0xe4>
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40004c00 	.word	0x40004c00
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40013800 	.word	0x40013800

08000c14 <USART_Write>:
		// Reading USART_DR automatically clears the RXNE flag
	else
		return 0 ;
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e014      	b.n	8000c50 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000c26:	bf00      	nop
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f9      	beq.n	8000c28 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000c42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c46:	f000 f819 	bl	8000c7c <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8e6      	bhi.n	8000c26 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000c58:	bf00      	nop
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f9      	beq.n	8000c5a <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	61da      	str	r2, [r3, #28]
}   
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2264      	movs	r2, #100	; 0x64
 8000c88:	fb02 f203 	mul.w	r2, r2, r3
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <USART_Delay+0x38>)
 8000c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c92:	1ad2      	subs	r2, r2, r3
 8000c94:	0852      	lsrs	r2, r2, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f9      	bne.n	8000c9c <USART_Delay+0x20>
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	24924925 	.word	0x24924925

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fb2c 	bl	800131a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f82b 	bl	8000d1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART2_Init();
 8000cc6:	f7ff fec1 	bl	8000a4c <UART2_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 f8d3 	bl	8000e74 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cce:	f000 f877 	bl	8000dc0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <main+0x54>)
 8000cd6:	f001 fcf7 	bl	80026c8 <HAL_TIM_IC_Start_IT>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */

  	  int distance = HCSR04_Read();
 8000cda:	f000 fad1 	bl	8001280 <HCSR04_Read>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60fb      	str	r3, [r7, #12]
  	  HAL_Delay(200);
 8000ce2:	20c8      	movs	r0, #200	; 0xc8
 8000ce4:	f000 fb8e 	bl	8001404 <HAL_Delay>
	  char str[12];
	  sprintf(str, "%d", distance);
 8000ce8:	463b      	mov	r3, r7
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4908      	ldr	r1, [pc, #32]	; (8000d10 <main+0x58>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fb08 	bl	8003304 <siprintf>
	  USART_Write(USART2, (uint8_t*)str, 4);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <main+0x5c>)
 8000cfc:	f7ff ff8a 	bl	8000c14 <USART_Write>
	  USART_Write(USART2, (uint8_t*)"\r\n", 2);
 8000d00:	2202      	movs	r2, #2
 8000d02:	4905      	ldr	r1, [pc, #20]	; (8000d18 <main+0x60>)
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <main+0x5c>)
 8000d06:	f7ff ff85 	bl	8000c14 <USART_Write>
    {
 8000d0a:	e7e6      	b.n	8000cda <main+0x22>
 8000d0c:	200000a8 	.word	0x200000a8
 8000d10:	08003b28 	.word	0x08003b28
 8000d14:	40004400 	.word	0x40004400
 8000d18:	08003b2c 	.word	0x08003b2c

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 fae2 	bl	80032f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d52:	2301      	movs	r3, #1
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d5a:	2328      	movs	r3, #40	; 0x28
 8000d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fea0 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d7a:	f000 f8ad 	bl	8000ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2303      	movs	r3, #3
 8000d84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	2104      	movs	r1, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fa72 	bl	8002280 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000da2:	f000 f899 	bl	8000ed8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000daa:	f000 fe2d 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000db4:	f000 f890 	bl	8000ed8 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3758      	adds	r7, #88	; 0x58
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_TIM1_Init+0xb0>)
 8000de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000de6:	224f      	movs	r2, #79	; 0x4f
 8000de8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000df2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000df6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000e0c:	f001 fc04 	bl	8002618 <HAL_TIM_IC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e16:	f000 f85f 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000e2e:	f002 f991 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e38:	f000 f84e 	bl	8000ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM1_Init+0xac>)
 8000e54:	f001 fe99 	bl	8002b8a <HAL_TIM_IC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 f83b 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000a8 	.word	0x200000a8
 8000e70:	40012c00 	.word	0x40012c00

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_GPIO_Init+0x5c>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x5c>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_GPIO_Init+0x5c>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <MX_GPIO_Init+0x60>)
 8000ea8:	f000 fd88 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_GPIO_Init+0x60>)
 8000ec4:	f000 fbd2 	bl	800166c <HAL_GPIO_Init>

}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48001000 	.word	0x48001000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_TIM_IC_MspInit+0x8c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d130      	bne.n	8000fb4 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_TIM_IC_MspInit+0x90>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_TIM_IC_MspInit+0x94>)
 8000fa0:	f000 fb64 	bl	800166c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	201b      	movs	r0, #27
 8000faa:	f000 fb28 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 fb41 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48001000 	.word	0x48001000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f9d2 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM1_CC_IRQHandler+0x10>)
 800102a:	f001 fc8f 	bl	800294c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000a8 	.word	0x200000a8

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f002 f91a 	bl	80032a0 <__errno>
 800106c:	4602      	mov	r2, r0
 800106e:	230c      	movs	r3, #12
 8001070:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20018000 	.word	0x20018000
 8001098:	00000400 	.word	0x00000400
 800109c:	2000008c 	.word	0x2000008c
 80010a0:	20000100 	.word	0x20000100

080010a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <SystemInit+0x64>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <SystemInit+0x64>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <SystemInit+0x68>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <SystemInit+0x68>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <SystemInit+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <SystemInit+0x68>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <SystemInit+0x68>)
 80010d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <SystemInit+0x68>)
 80010dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <SystemInit+0x68>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <SystemInit+0x68>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <SystemInit+0x68>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SystemInit+0x64>)
 80010f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fa:	609a      	str	r2, [r3, #8]
#endif
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	40021000 	.word	0x40021000

08001110 <delay>:
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;

void delay (uint16_t time)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <delay+0x2c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8001122:	bf00      	nop
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <delay+0x2c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3f9      	bcc.n	8001124 <delay+0x14>
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	200000a8 	.word	0x200000a8

08001140 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7f1b      	ldrb	r3, [r3, #28]
 800114c:	2b02      	cmp	r3, #2
 800114e:	f040 8083 	bne.w	8001258 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11a      	bne.n	8001190 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800115a:	2104      	movs	r1, #4
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fda9 	bl	8002cb4 <HAL_TIM_ReadCapturedValue>
 8001162:	4602      	mov	r2, r0
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001166:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x128>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800117c:	621a      	str	r2, [r3, #32]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
		}
	}
}
 800118e:	e063      	b.n	8001258 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d15f      	bne.n	8001258 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001198:	2104      	movs	r1, #4
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f001 fd8a 	bl	8002cb4 <HAL_TIM_ReadCapturedValue>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011a4:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d907      	bls.n	80011ca <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	e00f      	b.n	80011ea <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d909      	bls.n	80011ea <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011e4:	33ff      	adds	r3, #255	; 0xff
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011e8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f980 	bl	80004f4 <__aeabi_ui2d>
 80011f4:	a31a      	add	r3, pc, #104	; (adr r3, 8001260 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f9f5 	bl	80005e8 <__aeabi_dmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	4618      	mov	r0, r3
 8001204:	4621      	mov	r1, r4
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120e:	f7ff fb15 	bl	800083c <__aeabi_ddiv>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	f7ff fbf7 	bl	8000a0c <__aeabi_d2uiz>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001224:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a1a      	ldr	r2, [r3, #32]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a12      	ldr	r2, [r2, #32]
 8001246:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	b020c49c 	.word	0xb020c49c
 8001264:	3fa16872 	.word	0x3fa16872
 8001268:	2000009c 	.word	0x2000009c
 800126c:	20000090 	.word	0x20000090
 8001270:	20000094 	.word	0x20000094
 8001274:	20000098 	.word	0x20000098
 8001278:	2000009d 	.word	0x2000009d
 800127c:	200000a8 	.word	0x200000a8

08001280 <HCSR04_Read>:

uint8_t HCSR04_Read (void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <HCSR04_Read+0x3c>)
 800128c:	f000 fb96 	bl	80019bc <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001290:	200a      	movs	r0, #10
 8001292:	f7ff ff3d 	bl	8001110 <delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <HCSR04_Read+0x3c>)
 800129e:	f000 fb8d 	bl	80019bc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HCSR04_Read+0x40>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HCSR04_Read+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0204 	orr.w	r2, r2, #4
 80012b0:	60da      	str	r2, [r3, #12]
	return Distance;
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HCSR04_Read+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	48001000 	.word	0x48001000
 80012c0:	200000a8 	.word	0x200000a8
 80012c4:	2000009d 	.word	0x2000009d

080012c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012cc:	f7ff feea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <LoopForever+0xe>)
	adds	r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
	ldr	r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <LoopForever+0x16>)
	cmp	r2, r3
 80012f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f001 ffd9 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fa:	f7ff fcdd 	bl	8000cb8 <main>

080012fe <LoopForever>:

LoopForever:
    b LoopForever
 80012fe:	e7fe      	b.n	80012fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001304:	08003bac 	.word	0x08003bac
	ldr	r0, =_sdata
 8001308:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800130c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001310:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001314:	200000fc 	.word	0x200000fc

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>

0800131a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f95f 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f80e 	bl	800134c <HAL_InitTick>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e001      	b.n	8001340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133c:	f7ff fdd4 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001340:	79fb      	ldrb	r3, [r7, #7]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d023      	beq.n	80013a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_InitTick+0x70>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f96b 	bl	8001652 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d809      	bhi.n	800139c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f935 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_InitTick+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e007      	b.n	80013ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e004      	b.n	80013ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e001      	b.n	80013ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200000f4 	.word	0x200000f4

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000f4 	.word	0x200000f4

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_Delay+0x40>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e17f      	b.n	800197c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8171 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d00b      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a8:	2b11      	cmp	r3, #17
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d118      	bne.n	8001754 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001728:	2201      	movs	r2, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	f003 0201 	and.w	r2, r3, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x128>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b12      	cmp	r3, #18
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80ac 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_GPIO_Init+0x32c>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001836:	4a59      	ldr	r2, [pc, #356]	; (800199c <HAL_GPIO_Init+0x330>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x242>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4e      	ldr	r2, [pc, #312]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4d      	ldr	r2, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x338>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4c      	ldr	r2, [pc, #304]	; (80019a8 <HAL_GPIO_Init+0x33c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_GPIO_Init+0x340>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x344>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x348>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x22a>
 8001892:	2306      	movs	r3, #6
 8001894:	e00c      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 8001896:	2307      	movs	r3, #7
 8001898:	e00a      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189e:	2304      	movs	r3, #4
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018ae:	2300      	movs	r3, #0
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c0:	4936      	ldr	r1, [pc, #216]	; (800199c <HAL_GPIO_Init+0x330>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ce:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191c:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f ae78 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	48000800 	.word	0x48000800
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001000 	.word	0x48001000
 80019b0:	48001400 	.word	0x48001400
 80019b4:	48001800 	.word	0x48001800
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a16:	d130      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a24:	d038      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	e002      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d102      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	d110      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00f      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d007      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e3d4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80e4 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_RCC_OscConfig+0x4a>
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	f040 808b 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 8087 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afe:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e3ac      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1a      	ldr	r2, [r3, #32]
 8001b1a:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_RCC_OscConfig+0x7c>
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_OscConfig+0x88>
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d223      	bcs.n	8001b88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd07 	bl	8002558 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e38d      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4977      	ldr	r1, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4972      	ldr	r1, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e025      	b.n	8001bd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b88:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6f      	ldr	r2, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	496a      	ldr	r1, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba6:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4965      	ldr	r1, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fcc7 	bl	8002558 <RCC_SetFlashLatencyFromMSIRange>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e34d      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd4:	f000 fc36 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x29c>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x2a0>)
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2a4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fba7 	bl	800134c <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d052      	beq.n	8001cae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	e331      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d032      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fbe4 	bl	80013ec <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbe0 	bl	80013ec <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e31a      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	493b      	ldr	r1, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e01a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fbb1 	bl	80013ec <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fbad 	bl	80013ec <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e2e7      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x1da>
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d074      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x21a>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d10e      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d064      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d160      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e2c4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x24a>
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e01d      	b.n	8001d3a <HAL_RCC_OscConfig+0x286>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x26e>
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x286>
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x298>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fb53 	bl	80013ec <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d48:	e011      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08003b30 	.word	0x08003b30
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb46 	bl	80013ec <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e280      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4baf      	ldr	r3, [pc, #700]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb36 	bl	80013ec <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fb32 	bl	80013ec <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e26c      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4ba5      	ldr	r3, [pc, #660]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b99      	ldr	r3, [pc, #612]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e249      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b93      	ldr	r3, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4990      	ldr	r1, [pc, #576]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8b      	ldr	r2, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff faf1 	bl	80013ec <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff faed 	bl	80013ec <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e227      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	497c      	ldr	r1, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a79      	ldr	r2, [pc, #484]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff facd 	bl	80013ec <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fac9 	bl	80013ec <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e203      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff faa8 	bl	80013ec <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff faa4 	bl	80013ec <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1de      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fa8b 	bl	80013ec <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff fa87 	bl	80013ec <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1c1      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a43      	ldr	r2, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fa4e 	bl	80013ec <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff fa4a 	bl	80013ec <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e184      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_RCC_OscConfig+0x57c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	e024      	b.n	8001fd6 <HAL_RCC_OscConfig+0x522>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d110      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x502>
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	e00f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x522>
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a17      	ldr	r2, [pc, #92]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa05 	bl	80013ec <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fa01 	bl	80013ec <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e139      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ed      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x532>
 800200a:	e01a      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff f9ee 	bl	80013ec <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7ff f9ea 	bl	80013ec <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d906      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e122      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e8      	bne.n	8002014 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b8b      	ldr	r3, [pc, #556]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a8a      	ldr	r2, [pc, #552]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8108 	beq.w	800226e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b02      	cmp	r3, #2
 8002064:	f040 80d0 	bne.w	8002208 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002068:	4b83      	ldr	r3, [pc, #524]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d130      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	3b01      	subs	r3, #1
 8002088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d127      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11f      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020a8:	2a07      	cmp	r2, #7
 80020aa:	bf14      	ite	ne
 80020ac:	2201      	movne	r2, #1
 80020ae:	2200      	moveq	r2, #0
 80020b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d109      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d06e      	beq.n	80021bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d069      	beq.n	80021b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b7      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800210c:	f7ff f96e 	bl	80013ec <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f96a 	bl	80013ec <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0a4      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x7c8>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002142:	3a01      	subs	r2, #1
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800214c:	0212      	lsls	r2, r2, #8
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002154:	0852      	lsrs	r2, r2, #1
 8002156:	3a01      	subs	r2, #1
 8002158:	0552      	lsls	r2, r2, #21
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0652      	lsls	r2, r2, #25
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	0452      	lsls	r2, r2, #17
 8002170:	430a      	orrs	r2, r1
 8002172:	4941      	ldr	r1, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002190:	f7ff f92c 	bl	80013ec <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff f928 	bl	80013ec <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e062      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b6:	e05a      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e059      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d152      	bne.n	800226e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e0:	f7ff f904 	bl	80013ec <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f900 	bl	80013ec <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e03a      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x734>
 8002206:	e032      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d02d      	beq.n	800226a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff f8d3 	bl	80013ec <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff f8cf 	bl	80013ec <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e009      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x7c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x796>
 8002268:	e001      	b.n	800226e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	f99d808c 	.word	0xf99d808c

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0c8      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4961      	ldr	r1, [pc, #388]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b0      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d04c      	beq.n	800236a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e09e      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e092      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e086      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e07e      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 0203 	bic.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	493f      	ldr	r1, [pc, #252]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233a:	f7ff f857 	bl	80013ec <HAL_GetTick>
 800233e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	e00a      	b.n	8002358 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7ff f853 	bl	80013ec <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e066      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 020c 	and.w	r2, r3, #12
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	429a      	cmp	r2, r3
 8002368:	d1eb      	bne.n	8002342 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	492c      	ldr	r1, [pc, #176]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d210      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4924      	ldr	r1, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e036      	b.n	8002426 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f6:	f000 f825 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fa:	4601      	mov	r1, r0
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa21 f303 	lsr.w	r3, r1, r3
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ff96 	bl	800134c <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	72fb      	strb	r3, [r7, #11]

  return status;
 8002424:	7afb      	ldrb	r3, [r7, #11]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	08003b30 	.word	0x08003b30
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2a      	ldr	r2, [pc, #168]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d133      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xaa>
 80024e6:	e005      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ea:	617b      	str	r3, [r7, #20]
      break;
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	3301      	adds	r3, #1
 8002506:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	fb02 f203 	mul.w	r2, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_GetSysClockFreq+0x104>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0e5b      	lsrs	r3, r3, #25
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253a:	69bb      	ldr	r3, [r7, #24]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3724      	adds	r7, #36	; 0x24
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	08003b40 	.word	0x08003b40
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002570:	f7ff fa3c 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002574:	6178      	str	r0, [r7, #20]
 8002576:	e014      	b.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6593      	str	r3, [r2, #88]	; 0x58
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002590:	f7ff fa2c 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002594:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a8:	d10b      	bne.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	d919      	bls.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2ba0      	cmp	r3, #160	; 0xa0
 80025b4:	d902      	bls.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025b6:	2302      	movs	r3, #2
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e013      	b.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e010      	b.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d902      	bls.n	80025ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025c8:	2303      	movs	r3, #3
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	e00a      	b.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d102      	bne.n	80025da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d4:	2302      	movs	r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e004      	b.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b70      	cmp	r3, #112	; 0x70
 80025de:	d101      	bne.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e0:	2301      	movs	r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	4909      	ldr	r1, [pc, #36]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40022000 	.word	0x40022000

08002618 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e049      	b.n	80026be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fc76 	bl	8000f30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f000 fb98 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_IC_Start_IT+0x1a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e023      	b.n	800272a <HAL_TIM_IC_Start_IT+0x62>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_IC_Start_IT+0x2a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e01b      	b.n	800272a <HAL_TIM_IC_Start_IT+0x62>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_IC_Start_IT+0x3a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e013      	b.n	800272a <HAL_TIM_IC_Start_IT+0x62>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d104      	bne.n	8002712 <HAL_TIM_IC_Start_IT+0x4a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e00b      	b.n	800272a <HAL_TIM_IC_Start_IT+0x62>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d104      	bne.n	8002722 <HAL_TIM_IC_Start_IT+0x5a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e003      	b.n	800272a <HAL_TIM_IC_Start_IT+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002728:	b2db      	uxtb	r3, r3
 800272a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_TIM_IC_Start_IT+0x74>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e013      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x9c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d104      	bne.n	800274c <HAL_TIM_IC_Start_IT+0x84>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e00b      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x9c>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d104      	bne.n	800275c <HAL_TIM_IC_Start_IT+0x94>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e003      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x9c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002762:	b2db      	uxtb	r3, r3
 8002764:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d102      	bne.n	8002772 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0d8      	b.n	8002928 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <HAL_TIM_IC_Start_IT+0xbe>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002784:	e023      	b.n	80027ce <HAL_TIM_IC_Start_IT+0x106>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d104      	bne.n	8002796 <HAL_TIM_IC_Start_IT+0xce>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	e01b      	b.n	80027ce <HAL_TIM_IC_Start_IT+0x106>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_IC_Start_IT+0xde>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	e013      	b.n	80027ce <HAL_TIM_IC_Start_IT+0x106>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_IC_Start_IT+0xee>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027b4:	e00b      	b.n	80027ce <HAL_TIM_IC_Start_IT+0x106>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_IC_Start_IT+0xfe>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c4:	e003      	b.n	80027ce <HAL_TIM_IC_Start_IT+0x106>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start_IT+0x116>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027dc:	e013      	b.n	8002806 <HAL_TIM_IC_Start_IT+0x13e>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_IC_Start_IT+0x126>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ec:	e00b      	b.n	8002806 <HAL_TIM_IC_Start_IT+0x13e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_IC_Start_IT+0x136>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027fc:	e003      	b.n	8002806 <HAL_TIM_IC_Start_IT+0x13e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d841      	bhi.n	8002890 <HAL_TIM_IC_Start_IT+0x1c8>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_TIM_IC_Start_IT+0x14c>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002849 	.word	0x08002849
 8002818:	08002891 	.word	0x08002891
 800281c:	08002891 	.word	0x08002891
 8002820:	08002891 	.word	0x08002891
 8002824:	0800285b 	.word	0x0800285b
 8002828:	08002891 	.word	0x08002891
 800282c:	08002891 	.word	0x08002891
 8002830:	08002891 	.word	0x08002891
 8002834:	0800286d 	.word	0x0800286d
 8002838:	08002891 	.word	0x08002891
 800283c:	08002891 	.word	0x08002891
 8002840:	08002891 	.word	0x08002891
 8002844:	0800287f 	.word	0x0800287f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0202 	orr.w	r2, r2, #2
 8002856:	60da      	str	r2, [r3, #12]
      break;
 8002858:	e01b      	b.n	8002892 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0204 	orr.w	r2, r2, #4
 8002868:	60da      	str	r2, [r3, #12]
      break;
 800286a:	e012      	b.n	8002892 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	60da      	str	r2, [r3, #12]
      break;
 800287c:	e009      	b.n	8002892 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0210 	orr.w	r2, r2, #16
 800288c:	60da      	str	r2, [r3, #12]
      break;
 800288e:	e000      	b.n	8002892 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002890:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2201      	movs	r2, #1
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fc34 	bl	8003108 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_TIM_IC_Start_IT+0x268>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d018      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_TIM_IC_Start_IT+0x26c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_TIM_IC_Start_IT+0x270>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_TIM_IC_Start_IT+0x274>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_TIM_IC_Start_IT+0x278>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_IC_Start_IT+0x21e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIM_IC_Start_IT+0x27c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_TIM_IC_Start_IT+0x280>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d015      	beq.n	8002924 <HAL_TIM_IC_Start_IT+0x25c>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d011      	beq.n	8002924 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e008      	b.n	8002924 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40013400 	.word	0x40013400
 8002944:	40014000 	.word	0x40014000
 8002948:	00010007 	.word	0x00010007

0800294c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0202 	mvn.w	r2, #2
 8002978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fbd6 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9da 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9e1 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0204 	mvn.w	r2, #4
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fbac 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9b0 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f9b7 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0208 	mvn.w	r2, #8
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2204      	movs	r2, #4
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fb82 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f986 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f98d 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fb58 	bl	8001140 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f95c 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f963 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0201 	mvn.w	r2, #1
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f936 	bl	8002d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fbbe 	bl	8003278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fbb1 	bl	800328c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f911 	bl	8002d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0220 	mvn.w	r2, #32
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fb71 	bl	8003264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e082      	b.n	8002caa <HAL_TIM_IC_ConfigChannel+0x120>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11b      	bne.n	8002bea <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f000 f97d 	bl	8002ec0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020c 	bic.w	r2, r2, #12
 8002bd4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6999      	ldr	r1, [r3, #24]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	e05a      	b.n	8002ca0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d11c      	bne.n	8002c2a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f000 f9cc 	bl	8002f9c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c12:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	e03a      	b.n	8002ca0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f000 f9e9 	bl	8003016 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 020c 	bic.w	r2, r2, #12
 8002c52:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69d9      	ldr	r1, [r3, #28]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
 8002c66:	e01b      	b.n	8002ca0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f000 fa09 	bl	800308e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69d9      	ldr	r1, [r3, #28]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d831      	bhi.n	8002d2c <HAL_TIM_ReadCapturedValue+0x78>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d05 	.word	0x08002d05
 8002cd4:	08002d2d 	.word	0x08002d2d
 8002cd8:	08002d2d 	.word	0x08002d2d
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d0f 	.word	0x08002d0f
 8002ce4:	08002d2d 	.word	0x08002d2d
 8002ce8:	08002d2d 	.word	0x08002d2d
 8002cec:	08002d2d 	.word	0x08002d2d
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d2d 	.word	0x08002d2d
 8002d00:	08002d23 	.word	0x08002d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	60fb      	str	r3, [r7, #12]

      break;
 8002d0c:	e00f      	b.n	8002d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	60fb      	str	r3, [r7, #12]

      break;
 8002d16:	e00a      	b.n	8002d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	60fb      	str	r3, [r7, #12]

      break;
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	60fb      	str	r3, [r7, #12]

      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d2c:	bf00      	nop
  }

  return tmpreg;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d00f      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <TIM_Base_SetConfig+0x118>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3c      	ldr	r2, [pc, #240]	; (8002ea8 <TIM_Base_SetConfig+0x11c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <TIM_Base_SetConfig+0x120>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2f      	ldr	r2, [pc, #188]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d01b      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <TIM_Base_SetConfig+0x118>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d017      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <TIM_Base_SetConfig+0x11c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <TIM_Base_SetConfig+0x120>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_Base_SetConfig+0x128>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <TIM_Base_SetConfig+0x130>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00f      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <TIM_Base_SetConfig+0x128>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <TIM_Base_SetConfig+0x130>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800

08002ec0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <TIM_TI1_SetConfig+0xc4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d017      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d013      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <TIM_TI1_SetConfig+0xc8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00f      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <TIM_TI1_SetConfig+0xcc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <TIM_TI1_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <TIM_TI1_SetConfig+0xd4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_TI1_SetConfig+0x5e>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <TIM_TI1_SetConfig+0xd8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <TIM_TI1_SetConfig+0x62>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <TIM_TI1_SetConfig+0x64>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e003      	b.n	8002f42 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f003 030a 	and.w	r3, r3, #10
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40013400 	.word	0x40013400
 8002f98:	40014000 	.word	0x40014000

08002f9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0210 	bic.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	031b      	lsls	r3, r3, #12
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	b2db      	uxtb	r3, r3
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	031b      	lsls	r3, r3, #12
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80030e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	031b      	lsls	r3, r3, #12
 80030e6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2201      	movs	r2, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003168:	2302      	movs	r3, #2
 800316a:	e068      	b.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d018      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40013400 	.word	0x40013400
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40014000 	.word	0x40014000

08003264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <__errno>:
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <__errno+0x8>)
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000000c 	.word	0x2000000c

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4e0d      	ldr	r6, [pc, #52]	; (80032e4 <__libc_init_array+0x38>)
 80032b0:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b2:	1ba4      	subs	r4, r4, r6
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	2500      	movs	r5, #0
 80032b8:	42a5      	cmp	r5, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	4e0b      	ldr	r6, [pc, #44]	; (80032ec <__libc_init_array+0x40>)
 80032be:	4c0c      	ldr	r4, [pc, #48]	; (80032f0 <__libc_init_array+0x44>)
 80032c0:	f000 fc26 	bl	8003b10 <_init>
 80032c4:	1ba4      	subs	r4, r4, r6
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	2500      	movs	r5, #0
 80032ca:	42a5      	cmp	r5, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d4:	4798      	blx	r3
 80032d6:	3501      	adds	r5, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032de:	4798      	blx	r3
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	08003ba4 	.word	0x08003ba4
 80032e8:	08003ba4 	.word	0x08003ba4
 80032ec:	08003ba4 	.word	0x08003ba4
 80032f0:	08003ba8 	.word	0x08003ba8

080032f4 <memset>:
 80032f4:	4402      	add	r2, r0
 80032f6:	4603      	mov	r3, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <memset+0xa>
 80032fc:	4770      	bx	lr
 80032fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003302:	e7f9      	b.n	80032f8 <memset+0x4>

08003304 <siprintf>:
 8003304:	b40e      	push	{r1, r2, r3}
 8003306:	b500      	push	{lr}
 8003308:	b09c      	sub	sp, #112	; 0x70
 800330a:	ab1d      	add	r3, sp, #116	; 0x74
 800330c:	9002      	str	r0, [sp, #8]
 800330e:	9006      	str	r0, [sp, #24]
 8003310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003314:	4809      	ldr	r0, [pc, #36]	; (800333c <siprintf+0x38>)
 8003316:	9107      	str	r1, [sp, #28]
 8003318:	9104      	str	r1, [sp, #16]
 800331a:	4909      	ldr	r1, [pc, #36]	; (8003340 <siprintf+0x3c>)
 800331c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003320:	9105      	str	r1, [sp, #20]
 8003322:	6800      	ldr	r0, [r0, #0]
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	a902      	add	r1, sp, #8
 8003328:	f000 f866 	bl	80033f8 <_svfiprintf_r>
 800332c:	9b02      	ldr	r3, [sp, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	b01c      	add	sp, #112	; 0x70
 8003334:	f85d eb04 	ldr.w	lr, [sp], #4
 8003338:	b003      	add	sp, #12
 800333a:	4770      	bx	lr
 800333c:	2000000c 	.word	0x2000000c
 8003340:	ffff0208 	.word	0xffff0208

08003344 <__ssputs_r>:
 8003344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003348:	688e      	ldr	r6, [r1, #8]
 800334a:	429e      	cmp	r6, r3
 800334c:	4682      	mov	sl, r0
 800334e:	460c      	mov	r4, r1
 8003350:	4690      	mov	r8, r2
 8003352:	4699      	mov	r9, r3
 8003354:	d837      	bhi.n	80033c6 <__ssputs_r+0x82>
 8003356:	898a      	ldrh	r2, [r1, #12]
 8003358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800335c:	d031      	beq.n	80033c2 <__ssputs_r+0x7e>
 800335e:	6825      	ldr	r5, [r4, #0]
 8003360:	6909      	ldr	r1, [r1, #16]
 8003362:	1a6f      	subs	r7, r5, r1
 8003364:	6965      	ldr	r5, [r4, #20]
 8003366:	2302      	movs	r3, #2
 8003368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800336c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003370:	f109 0301 	add.w	r3, r9, #1
 8003374:	443b      	add	r3, r7
 8003376:	429d      	cmp	r5, r3
 8003378:	bf38      	it	cc
 800337a:	461d      	movcc	r5, r3
 800337c:	0553      	lsls	r3, r2, #21
 800337e:	d530      	bpl.n	80033e2 <__ssputs_r+0x9e>
 8003380:	4629      	mov	r1, r5
 8003382:	f000 fb2b 	bl	80039dc <_malloc_r>
 8003386:	4606      	mov	r6, r0
 8003388:	b950      	cbnz	r0, 80033a0 <__ssputs_r+0x5c>
 800338a:	230c      	movs	r3, #12
 800338c:	f8ca 3000 	str.w	r3, [sl]
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003396:	81a3      	strh	r3, [r4, #12]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a0:	463a      	mov	r2, r7
 80033a2:	6921      	ldr	r1, [r4, #16]
 80033a4:	f000 faa8 	bl	80038f8 <memcpy>
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	6126      	str	r6, [r4, #16]
 80033b6:	6165      	str	r5, [r4, #20]
 80033b8:	443e      	add	r6, r7
 80033ba:	1bed      	subs	r5, r5, r7
 80033bc:	6026      	str	r6, [r4, #0]
 80033be:	60a5      	str	r5, [r4, #8]
 80033c0:	464e      	mov	r6, r9
 80033c2:	454e      	cmp	r6, r9
 80033c4:	d900      	bls.n	80033c8 <__ssputs_r+0x84>
 80033c6:	464e      	mov	r6, r9
 80033c8:	4632      	mov	r2, r6
 80033ca:	4641      	mov	r1, r8
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	f000 fa9e 	bl	800390e <memmove>
 80033d2:	68a3      	ldr	r3, [r4, #8]
 80033d4:	1b9b      	subs	r3, r3, r6
 80033d6:	60a3      	str	r3, [r4, #8]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	441e      	add	r6, r3
 80033dc:	6026      	str	r6, [r4, #0]
 80033de:	2000      	movs	r0, #0
 80033e0:	e7dc      	b.n	800339c <__ssputs_r+0x58>
 80033e2:	462a      	mov	r2, r5
 80033e4:	f000 fb54 	bl	8003a90 <_realloc_r>
 80033e8:	4606      	mov	r6, r0
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d1e2      	bne.n	80033b4 <__ssputs_r+0x70>
 80033ee:	6921      	ldr	r1, [r4, #16]
 80033f0:	4650      	mov	r0, sl
 80033f2:	f000 faa5 	bl	8003940 <_free_r>
 80033f6:	e7c8      	b.n	800338a <__ssputs_r+0x46>

080033f8 <_svfiprintf_r>:
 80033f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	461d      	mov	r5, r3
 80033fe:	898b      	ldrh	r3, [r1, #12]
 8003400:	061f      	lsls	r7, r3, #24
 8003402:	b09d      	sub	sp, #116	; 0x74
 8003404:	4680      	mov	r8, r0
 8003406:	460c      	mov	r4, r1
 8003408:	4616      	mov	r6, r2
 800340a:	d50f      	bpl.n	800342c <_svfiprintf_r+0x34>
 800340c:	690b      	ldr	r3, [r1, #16]
 800340e:	b96b      	cbnz	r3, 800342c <_svfiprintf_r+0x34>
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	f000 fae3 	bl	80039dc <_malloc_r>
 8003416:	6020      	str	r0, [r4, #0]
 8003418:	6120      	str	r0, [r4, #16]
 800341a:	b928      	cbnz	r0, 8003428 <_svfiprintf_r+0x30>
 800341c:	230c      	movs	r3, #12
 800341e:	f8c8 3000 	str.w	r3, [r8]
 8003422:	f04f 30ff 	mov.w	r0, #4294967295
 8003426:	e0c8      	b.n	80035ba <_svfiprintf_r+0x1c2>
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	6163      	str	r3, [r4, #20]
 800342c:	2300      	movs	r3, #0
 800342e:	9309      	str	r3, [sp, #36]	; 0x24
 8003430:	2320      	movs	r3, #32
 8003432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003436:	2330      	movs	r3, #48	; 0x30
 8003438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343c:	9503      	str	r5, [sp, #12]
 800343e:	f04f 0b01 	mov.w	fp, #1
 8003442:	4637      	mov	r7, r6
 8003444:	463d      	mov	r5, r7
 8003446:	f815 3b01 	ldrb.w	r3, [r5], #1
 800344a:	b10b      	cbz	r3, 8003450 <_svfiprintf_r+0x58>
 800344c:	2b25      	cmp	r3, #37	; 0x25
 800344e:	d13e      	bne.n	80034ce <_svfiprintf_r+0xd6>
 8003450:	ebb7 0a06 	subs.w	sl, r7, r6
 8003454:	d00b      	beq.n	800346e <_svfiprintf_r+0x76>
 8003456:	4653      	mov	r3, sl
 8003458:	4632      	mov	r2, r6
 800345a:	4621      	mov	r1, r4
 800345c:	4640      	mov	r0, r8
 800345e:	f7ff ff71 	bl	8003344 <__ssputs_r>
 8003462:	3001      	adds	r0, #1
 8003464:	f000 80a4 	beq.w	80035b0 <_svfiprintf_r+0x1b8>
 8003468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346a:	4453      	add	r3, sl
 800346c:	9309      	str	r3, [sp, #36]	; 0x24
 800346e:	783b      	ldrb	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 809d 	beq.w	80035b0 <_svfiprintf_r+0x1b8>
 8003476:	2300      	movs	r3, #0
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003480:	9304      	str	r3, [sp, #16]
 8003482:	9307      	str	r3, [sp, #28]
 8003484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003488:	931a      	str	r3, [sp, #104]	; 0x68
 800348a:	462f      	mov	r7, r5
 800348c:	2205      	movs	r2, #5
 800348e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003492:	4850      	ldr	r0, [pc, #320]	; (80035d4 <_svfiprintf_r+0x1dc>)
 8003494:	f7fc fe9c 	bl	80001d0 <memchr>
 8003498:	9b04      	ldr	r3, [sp, #16]
 800349a:	b9d0      	cbnz	r0, 80034d2 <_svfiprintf_r+0xda>
 800349c:	06d9      	lsls	r1, r3, #27
 800349e:	bf44      	itt	mi
 80034a0:	2220      	movmi	r2, #32
 80034a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034a6:	071a      	lsls	r2, r3, #28
 80034a8:	bf44      	itt	mi
 80034aa:	222b      	movmi	r2, #43	; 0x2b
 80034ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034b0:	782a      	ldrb	r2, [r5, #0]
 80034b2:	2a2a      	cmp	r2, #42	; 0x2a
 80034b4:	d015      	beq.n	80034e2 <_svfiprintf_r+0xea>
 80034b6:	9a07      	ldr	r2, [sp, #28]
 80034b8:	462f      	mov	r7, r5
 80034ba:	2000      	movs	r0, #0
 80034bc:	250a      	movs	r5, #10
 80034be:	4639      	mov	r1, r7
 80034c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034c4:	3b30      	subs	r3, #48	; 0x30
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d94d      	bls.n	8003566 <_svfiprintf_r+0x16e>
 80034ca:	b1b8      	cbz	r0, 80034fc <_svfiprintf_r+0x104>
 80034cc:	e00f      	b.n	80034ee <_svfiprintf_r+0xf6>
 80034ce:	462f      	mov	r7, r5
 80034d0:	e7b8      	b.n	8003444 <_svfiprintf_r+0x4c>
 80034d2:	4a40      	ldr	r2, [pc, #256]	; (80035d4 <_svfiprintf_r+0x1dc>)
 80034d4:	1a80      	subs	r0, r0, r2
 80034d6:	fa0b f000 	lsl.w	r0, fp, r0
 80034da:	4318      	orrs	r0, r3
 80034dc:	9004      	str	r0, [sp, #16]
 80034de:	463d      	mov	r5, r7
 80034e0:	e7d3      	b.n	800348a <_svfiprintf_r+0x92>
 80034e2:	9a03      	ldr	r2, [sp, #12]
 80034e4:	1d11      	adds	r1, r2, #4
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	9103      	str	r1, [sp, #12]
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	db01      	blt.n	80034f2 <_svfiprintf_r+0xfa>
 80034ee:	9207      	str	r2, [sp, #28]
 80034f0:	e004      	b.n	80034fc <_svfiprintf_r+0x104>
 80034f2:	4252      	negs	r2, r2
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	9207      	str	r2, [sp, #28]
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	783b      	ldrb	r3, [r7, #0]
 80034fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003500:	d10c      	bne.n	800351c <_svfiprintf_r+0x124>
 8003502:	787b      	ldrb	r3, [r7, #1]
 8003504:	2b2a      	cmp	r3, #42	; 0x2a
 8003506:	d133      	bne.n	8003570 <_svfiprintf_r+0x178>
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	bfb8      	it	lt
 8003514:	f04f 33ff 	movlt.w	r3, #4294967295
 8003518:	3702      	adds	r7, #2
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	4d2e      	ldr	r5, [pc, #184]	; (80035d8 <_svfiprintf_r+0x1e0>)
 800351e:	7839      	ldrb	r1, [r7, #0]
 8003520:	2203      	movs	r2, #3
 8003522:	4628      	mov	r0, r5
 8003524:	f7fc fe54 	bl	80001d0 <memchr>
 8003528:	b138      	cbz	r0, 800353a <_svfiprintf_r+0x142>
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	1b40      	subs	r0, r0, r5
 800352e:	fa03 f000 	lsl.w	r0, r3, r0
 8003532:	9b04      	ldr	r3, [sp, #16]
 8003534:	4303      	orrs	r3, r0
 8003536:	3701      	adds	r7, #1
 8003538:	9304      	str	r3, [sp, #16]
 800353a:	7839      	ldrb	r1, [r7, #0]
 800353c:	4827      	ldr	r0, [pc, #156]	; (80035dc <_svfiprintf_r+0x1e4>)
 800353e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003542:	2206      	movs	r2, #6
 8003544:	1c7e      	adds	r6, r7, #1
 8003546:	f7fc fe43 	bl	80001d0 <memchr>
 800354a:	2800      	cmp	r0, #0
 800354c:	d038      	beq.n	80035c0 <_svfiprintf_r+0x1c8>
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <_svfiprintf_r+0x1e8>)
 8003550:	bb13      	cbnz	r3, 8003598 <_svfiprintf_r+0x1a0>
 8003552:	9b03      	ldr	r3, [sp, #12]
 8003554:	3307      	adds	r3, #7
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	3308      	adds	r3, #8
 800355c:	9303      	str	r3, [sp, #12]
 800355e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003560:	444b      	add	r3, r9
 8003562:	9309      	str	r3, [sp, #36]	; 0x24
 8003564:	e76d      	b.n	8003442 <_svfiprintf_r+0x4a>
 8003566:	fb05 3202 	mla	r2, r5, r2, r3
 800356a:	2001      	movs	r0, #1
 800356c:	460f      	mov	r7, r1
 800356e:	e7a6      	b.n	80034be <_svfiprintf_r+0xc6>
 8003570:	2300      	movs	r3, #0
 8003572:	3701      	adds	r7, #1
 8003574:	9305      	str	r3, [sp, #20]
 8003576:	4619      	mov	r1, r3
 8003578:	250a      	movs	r5, #10
 800357a:	4638      	mov	r0, r7
 800357c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003580:	3a30      	subs	r2, #48	; 0x30
 8003582:	2a09      	cmp	r2, #9
 8003584:	d903      	bls.n	800358e <_svfiprintf_r+0x196>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0c8      	beq.n	800351c <_svfiprintf_r+0x124>
 800358a:	9105      	str	r1, [sp, #20]
 800358c:	e7c6      	b.n	800351c <_svfiprintf_r+0x124>
 800358e:	fb05 2101 	mla	r1, r5, r1, r2
 8003592:	2301      	movs	r3, #1
 8003594:	4607      	mov	r7, r0
 8003596:	e7f0      	b.n	800357a <_svfiprintf_r+0x182>
 8003598:	ab03      	add	r3, sp, #12
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4622      	mov	r2, r4
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <_svfiprintf_r+0x1ec>)
 80035a0:	a904      	add	r1, sp, #16
 80035a2:	4640      	mov	r0, r8
 80035a4:	f3af 8000 	nop.w
 80035a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035ac:	4681      	mov	r9, r0
 80035ae:	d1d6      	bne.n	800355e <_svfiprintf_r+0x166>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	065b      	lsls	r3, r3, #25
 80035b4:	f53f af35 	bmi.w	8003422 <_svfiprintf_r+0x2a>
 80035b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ba:	b01d      	add	sp, #116	; 0x74
 80035bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c0:	ab03      	add	r3, sp, #12
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4622      	mov	r2, r4
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <_svfiprintf_r+0x1ec>)
 80035c8:	a904      	add	r1, sp, #16
 80035ca:	4640      	mov	r0, r8
 80035cc:	f000 f882 	bl	80036d4 <_printf_i>
 80035d0:	e7ea      	b.n	80035a8 <_svfiprintf_r+0x1b0>
 80035d2:	bf00      	nop
 80035d4:	08003b70 	.word	0x08003b70
 80035d8:	08003b76 	.word	0x08003b76
 80035dc:	08003b7a 	.word	0x08003b7a
 80035e0:	00000000 	.word	0x00000000
 80035e4:	08003345 	.word	0x08003345

080035e8 <_printf_common>:
 80035e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	4691      	mov	r9, r2
 80035ee:	461f      	mov	r7, r3
 80035f0:	688a      	ldr	r2, [r1, #8]
 80035f2:	690b      	ldr	r3, [r1, #16]
 80035f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfb8      	it	lt
 80035fc:	4613      	movlt	r3, r2
 80035fe:	f8c9 3000 	str.w	r3, [r9]
 8003602:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003606:	4606      	mov	r6, r0
 8003608:	460c      	mov	r4, r1
 800360a:	b112      	cbz	r2, 8003612 <_printf_common+0x2a>
 800360c:	3301      	adds	r3, #1
 800360e:	f8c9 3000 	str.w	r3, [r9]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0699      	lsls	r1, r3, #26
 8003616:	bf42      	ittt	mi
 8003618:	f8d9 3000 	ldrmi.w	r3, [r9]
 800361c:	3302      	addmi	r3, #2
 800361e:	f8c9 3000 	strmi.w	r3, [r9]
 8003622:	6825      	ldr	r5, [r4, #0]
 8003624:	f015 0506 	ands.w	r5, r5, #6
 8003628:	d107      	bne.n	800363a <_printf_common+0x52>
 800362a:	f104 0a19 	add.w	sl, r4, #25
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	f8d9 2000 	ldr.w	r2, [r9]
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	42ab      	cmp	r3, r5
 8003638:	dc28      	bgt.n	800368c <_printf_common+0xa4>
 800363a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	3300      	adds	r3, #0
 8003642:	bf18      	it	ne
 8003644:	2301      	movne	r3, #1
 8003646:	0692      	lsls	r2, r2, #26
 8003648:	d42d      	bmi.n	80036a6 <_printf_common+0xbe>
 800364a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800364e:	4639      	mov	r1, r7
 8003650:	4630      	mov	r0, r6
 8003652:	47c0      	blx	r8
 8003654:	3001      	adds	r0, #1
 8003656:	d020      	beq.n	800369a <_printf_common+0xb2>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	68e5      	ldr	r5, [r4, #12]
 800365c:	f8d9 2000 	ldr.w	r2, [r9]
 8003660:	f003 0306 	and.w	r3, r3, #6
 8003664:	2b04      	cmp	r3, #4
 8003666:	bf08      	it	eq
 8003668:	1aad      	subeq	r5, r5, r2
 800366a:	68a3      	ldr	r3, [r4, #8]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	bf0c      	ite	eq
 8003670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003674:	2500      	movne	r5, #0
 8003676:	4293      	cmp	r3, r2
 8003678:	bfc4      	itt	gt
 800367a:	1a9b      	subgt	r3, r3, r2
 800367c:	18ed      	addgt	r5, r5, r3
 800367e:	f04f 0900 	mov.w	r9, #0
 8003682:	341a      	adds	r4, #26
 8003684:	454d      	cmp	r5, r9
 8003686:	d11a      	bne.n	80036be <_printf_common+0xd6>
 8003688:	2000      	movs	r0, #0
 800368a:	e008      	b.n	800369e <_printf_common+0xb6>
 800368c:	2301      	movs	r3, #1
 800368e:	4652      	mov	r2, sl
 8003690:	4639      	mov	r1, r7
 8003692:	4630      	mov	r0, r6
 8003694:	47c0      	blx	r8
 8003696:	3001      	adds	r0, #1
 8003698:	d103      	bne.n	80036a2 <_printf_common+0xba>
 800369a:	f04f 30ff 	mov.w	r0, #4294967295
 800369e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a2:	3501      	adds	r5, #1
 80036a4:	e7c3      	b.n	800362e <_printf_common+0x46>
 80036a6:	18e1      	adds	r1, r4, r3
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	2030      	movs	r0, #48	; 0x30
 80036ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036b0:	4422      	add	r2, r4
 80036b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ba:	3302      	adds	r3, #2
 80036bc:	e7c5      	b.n	800364a <_printf_common+0x62>
 80036be:	2301      	movs	r3, #1
 80036c0:	4622      	mov	r2, r4
 80036c2:	4639      	mov	r1, r7
 80036c4:	4630      	mov	r0, r6
 80036c6:	47c0      	blx	r8
 80036c8:	3001      	adds	r0, #1
 80036ca:	d0e6      	beq.n	800369a <_printf_common+0xb2>
 80036cc:	f109 0901 	add.w	r9, r9, #1
 80036d0:	e7d8      	b.n	8003684 <_printf_common+0x9c>
	...

080036d4 <_printf_i>:
 80036d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036dc:	460c      	mov	r4, r1
 80036de:	7e09      	ldrb	r1, [r1, #24]
 80036e0:	b085      	sub	sp, #20
 80036e2:	296e      	cmp	r1, #110	; 0x6e
 80036e4:	4617      	mov	r7, r2
 80036e6:	4606      	mov	r6, r0
 80036e8:	4698      	mov	r8, r3
 80036ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036ec:	f000 80b3 	beq.w	8003856 <_printf_i+0x182>
 80036f0:	d822      	bhi.n	8003738 <_printf_i+0x64>
 80036f2:	2963      	cmp	r1, #99	; 0x63
 80036f4:	d036      	beq.n	8003764 <_printf_i+0x90>
 80036f6:	d80a      	bhi.n	800370e <_printf_i+0x3a>
 80036f8:	2900      	cmp	r1, #0
 80036fa:	f000 80b9 	beq.w	8003870 <_printf_i+0x19c>
 80036fe:	2958      	cmp	r1, #88	; 0x58
 8003700:	f000 8083 	beq.w	800380a <_printf_i+0x136>
 8003704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003708:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800370c:	e032      	b.n	8003774 <_printf_i+0xa0>
 800370e:	2964      	cmp	r1, #100	; 0x64
 8003710:	d001      	beq.n	8003716 <_printf_i+0x42>
 8003712:	2969      	cmp	r1, #105	; 0x69
 8003714:	d1f6      	bne.n	8003704 <_printf_i+0x30>
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	6813      	ldr	r3, [r2, #0]
 800371a:	0605      	lsls	r5, r0, #24
 800371c:	f103 0104 	add.w	r1, r3, #4
 8003720:	d52a      	bpl.n	8003778 <_printf_i+0xa4>
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da03      	bge.n	8003732 <_printf_i+0x5e>
 800372a:	222d      	movs	r2, #45	; 0x2d
 800372c:	425b      	negs	r3, r3
 800372e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003732:	486f      	ldr	r0, [pc, #444]	; (80038f0 <_printf_i+0x21c>)
 8003734:	220a      	movs	r2, #10
 8003736:	e039      	b.n	80037ac <_printf_i+0xd8>
 8003738:	2973      	cmp	r1, #115	; 0x73
 800373a:	f000 809d 	beq.w	8003878 <_printf_i+0x1a4>
 800373e:	d808      	bhi.n	8003752 <_printf_i+0x7e>
 8003740:	296f      	cmp	r1, #111	; 0x6f
 8003742:	d020      	beq.n	8003786 <_printf_i+0xb2>
 8003744:	2970      	cmp	r1, #112	; 0x70
 8003746:	d1dd      	bne.n	8003704 <_printf_i+0x30>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	e003      	b.n	800375a <_printf_i+0x86>
 8003752:	2975      	cmp	r1, #117	; 0x75
 8003754:	d017      	beq.n	8003786 <_printf_i+0xb2>
 8003756:	2978      	cmp	r1, #120	; 0x78
 8003758:	d1d4      	bne.n	8003704 <_printf_i+0x30>
 800375a:	2378      	movs	r3, #120	; 0x78
 800375c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003760:	4864      	ldr	r0, [pc, #400]	; (80038f4 <_printf_i+0x220>)
 8003762:	e055      	b.n	8003810 <_printf_i+0x13c>
 8003764:	6813      	ldr	r3, [r2, #0]
 8003766:	1d19      	adds	r1, r3, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6011      	str	r1, [r2, #0]
 800376c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003774:	2301      	movs	r3, #1
 8003776:	e08c      	b.n	8003892 <_printf_i+0x1be>
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6011      	str	r1, [r2, #0]
 800377c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003780:	bf18      	it	ne
 8003782:	b21b      	sxthne	r3, r3
 8003784:	e7cf      	b.n	8003726 <_printf_i+0x52>
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	6825      	ldr	r5, [r4, #0]
 800378a:	1d18      	adds	r0, r3, #4
 800378c:	6010      	str	r0, [r2, #0]
 800378e:	0628      	lsls	r0, r5, #24
 8003790:	d501      	bpl.n	8003796 <_printf_i+0xc2>
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	e002      	b.n	800379c <_printf_i+0xc8>
 8003796:	0668      	lsls	r0, r5, #25
 8003798:	d5fb      	bpl.n	8003792 <_printf_i+0xbe>
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	4854      	ldr	r0, [pc, #336]	; (80038f0 <_printf_i+0x21c>)
 800379e:	296f      	cmp	r1, #111	; 0x6f
 80037a0:	bf14      	ite	ne
 80037a2:	220a      	movne	r2, #10
 80037a4:	2208      	moveq	r2, #8
 80037a6:	2100      	movs	r1, #0
 80037a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ac:	6865      	ldr	r5, [r4, #4]
 80037ae:	60a5      	str	r5, [r4, #8]
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	f2c0 8095 	blt.w	80038e0 <_printf_i+0x20c>
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	f021 0104 	bic.w	r1, r1, #4
 80037bc:	6021      	str	r1, [r4, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d13d      	bne.n	800383e <_printf_i+0x16a>
 80037c2:	2d00      	cmp	r5, #0
 80037c4:	f040 808e 	bne.w	80038e4 <_printf_i+0x210>
 80037c8:	4665      	mov	r5, ip
 80037ca:	2a08      	cmp	r2, #8
 80037cc:	d10b      	bne.n	80037e6 <_printf_i+0x112>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	07db      	lsls	r3, r3, #31
 80037d2:	d508      	bpl.n	80037e6 <_printf_i+0x112>
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	6862      	ldr	r2, [r4, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	bfde      	ittt	le
 80037dc:	2330      	movle	r3, #48	; 0x30
 80037de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037e6:	ebac 0305 	sub.w	r3, ip, r5
 80037ea:	6123      	str	r3, [r4, #16]
 80037ec:	f8cd 8000 	str.w	r8, [sp]
 80037f0:	463b      	mov	r3, r7
 80037f2:	aa03      	add	r2, sp, #12
 80037f4:	4621      	mov	r1, r4
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff fef6 	bl	80035e8 <_printf_common>
 80037fc:	3001      	adds	r0, #1
 80037fe:	d14d      	bne.n	800389c <_printf_i+0x1c8>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	b005      	add	sp, #20
 8003806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800380a:	4839      	ldr	r0, [pc, #228]	; (80038f0 <_printf_i+0x21c>)
 800380c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	6821      	ldr	r1, [r4, #0]
 8003814:	1d1d      	adds	r5, r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6015      	str	r5, [r2, #0]
 800381a:	060a      	lsls	r2, r1, #24
 800381c:	d50b      	bpl.n	8003836 <_printf_i+0x162>
 800381e:	07ca      	lsls	r2, r1, #31
 8003820:	bf44      	itt	mi
 8003822:	f041 0120 	orrmi.w	r1, r1, #32
 8003826:	6021      	strmi	r1, [r4, #0]
 8003828:	b91b      	cbnz	r3, 8003832 <_printf_i+0x15e>
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	f022 0220 	bic.w	r2, r2, #32
 8003830:	6022      	str	r2, [r4, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	e7b7      	b.n	80037a6 <_printf_i+0xd2>
 8003836:	064d      	lsls	r5, r1, #25
 8003838:	bf48      	it	mi
 800383a:	b29b      	uxthmi	r3, r3
 800383c:	e7ef      	b.n	800381e <_printf_i+0x14a>
 800383e:	4665      	mov	r5, ip
 8003840:	fbb3 f1f2 	udiv	r1, r3, r2
 8003844:	fb02 3311 	mls	r3, r2, r1, r3
 8003848:	5cc3      	ldrb	r3, [r0, r3]
 800384a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800384e:	460b      	mov	r3, r1
 8003850:	2900      	cmp	r1, #0
 8003852:	d1f5      	bne.n	8003840 <_printf_i+0x16c>
 8003854:	e7b9      	b.n	80037ca <_printf_i+0xf6>
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	6825      	ldr	r5, [r4, #0]
 800385a:	6961      	ldr	r1, [r4, #20]
 800385c:	1d18      	adds	r0, r3, #4
 800385e:	6010      	str	r0, [r2, #0]
 8003860:	0628      	lsls	r0, r5, #24
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	d501      	bpl.n	800386a <_printf_i+0x196>
 8003866:	6019      	str	r1, [r3, #0]
 8003868:	e002      	b.n	8003870 <_printf_i+0x19c>
 800386a:	066a      	lsls	r2, r5, #25
 800386c:	d5fb      	bpl.n	8003866 <_printf_i+0x192>
 800386e:	8019      	strh	r1, [r3, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	4665      	mov	r5, ip
 8003876:	e7b9      	b.n	80037ec <_printf_i+0x118>
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	1d19      	adds	r1, r3, #4
 800387c:	6011      	str	r1, [r2, #0]
 800387e:	681d      	ldr	r5, [r3, #0]
 8003880:	6862      	ldr	r2, [r4, #4]
 8003882:	2100      	movs	r1, #0
 8003884:	4628      	mov	r0, r5
 8003886:	f7fc fca3 	bl	80001d0 <memchr>
 800388a:	b108      	cbz	r0, 8003890 <_printf_i+0x1bc>
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	6060      	str	r0, [r4, #4]
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	6123      	str	r3, [r4, #16]
 8003894:	2300      	movs	r3, #0
 8003896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800389a:	e7a7      	b.n	80037ec <_printf_i+0x118>
 800389c:	6923      	ldr	r3, [r4, #16]
 800389e:	462a      	mov	r2, r5
 80038a0:	4639      	mov	r1, r7
 80038a2:	4630      	mov	r0, r6
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d0aa      	beq.n	8003800 <_printf_i+0x12c>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	079b      	lsls	r3, r3, #30
 80038ae:	d413      	bmi.n	80038d8 <_printf_i+0x204>
 80038b0:	68e0      	ldr	r0, [r4, #12]
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	4298      	cmp	r0, r3
 80038b6:	bfb8      	it	lt
 80038b8:	4618      	movlt	r0, r3
 80038ba:	e7a3      	b.n	8003804 <_printf_i+0x130>
 80038bc:	2301      	movs	r3, #1
 80038be:	464a      	mov	r2, r9
 80038c0:	4639      	mov	r1, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	47c0      	blx	r8
 80038c6:	3001      	adds	r0, #1
 80038c8:	d09a      	beq.n	8003800 <_printf_i+0x12c>
 80038ca:	3501      	adds	r5, #1
 80038cc:	68e3      	ldr	r3, [r4, #12]
 80038ce:	9a03      	ldr	r2, [sp, #12]
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	42ab      	cmp	r3, r5
 80038d4:	dcf2      	bgt.n	80038bc <_printf_i+0x1e8>
 80038d6:	e7eb      	b.n	80038b0 <_printf_i+0x1dc>
 80038d8:	2500      	movs	r5, #0
 80038da:	f104 0919 	add.w	r9, r4, #25
 80038de:	e7f5      	b.n	80038cc <_printf_i+0x1f8>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ac      	bne.n	800383e <_printf_i+0x16a>
 80038e4:	7803      	ldrb	r3, [r0, #0]
 80038e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ee:	e76c      	b.n	80037ca <_printf_i+0xf6>
 80038f0:	08003b81 	.word	0x08003b81
 80038f4:	08003b92 	.word	0x08003b92

080038f8 <memcpy>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	1e43      	subs	r3, r0, #1
 80038fc:	440a      	add	r2, r1
 80038fe:	4291      	cmp	r1, r2
 8003900:	d100      	bne.n	8003904 <memcpy+0xc>
 8003902:	bd10      	pop	{r4, pc}
 8003904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800390c:	e7f7      	b.n	80038fe <memcpy+0x6>

0800390e <memmove>:
 800390e:	4288      	cmp	r0, r1
 8003910:	b510      	push	{r4, lr}
 8003912:	eb01 0302 	add.w	r3, r1, r2
 8003916:	d807      	bhi.n	8003928 <memmove+0x1a>
 8003918:	1e42      	subs	r2, r0, #1
 800391a:	4299      	cmp	r1, r3
 800391c:	d00a      	beq.n	8003934 <memmove+0x26>
 800391e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003922:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003926:	e7f8      	b.n	800391a <memmove+0xc>
 8003928:	4283      	cmp	r3, r0
 800392a:	d9f5      	bls.n	8003918 <memmove+0xa>
 800392c:	1881      	adds	r1, r0, r2
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	42d3      	cmn	r3, r2
 8003932:	d100      	bne.n	8003936 <memmove+0x28>
 8003934:	bd10      	pop	{r4, pc}
 8003936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800393a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800393e:	e7f7      	b.n	8003930 <memmove+0x22>

08003940 <_free_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	2900      	cmp	r1, #0
 8003946:	d045      	beq.n	80039d4 <_free_r+0x94>
 8003948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800394c:	1f0c      	subs	r4, r1, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfb8      	it	lt
 8003952:	18e4      	addlt	r4, r4, r3
 8003954:	f000 f8d2 	bl	8003afc <__malloc_lock>
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <_free_r+0x98>)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	4610      	mov	r0, r2
 800395e:	b933      	cbnz	r3, 800396e <_free_r+0x2e>
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	6014      	str	r4, [r2, #0]
 8003964:	4628      	mov	r0, r5
 8003966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800396a:	f000 b8c8 	b.w	8003afe <__malloc_unlock>
 800396e:	42a3      	cmp	r3, r4
 8003970:	d90c      	bls.n	800398c <_free_r+0x4c>
 8003972:	6821      	ldr	r1, [r4, #0]
 8003974:	1862      	adds	r2, r4, r1
 8003976:	4293      	cmp	r3, r2
 8003978:	bf04      	itt	eq
 800397a:	681a      	ldreq	r2, [r3, #0]
 800397c:	685b      	ldreq	r3, [r3, #4]
 800397e:	6063      	str	r3, [r4, #4]
 8003980:	bf04      	itt	eq
 8003982:	1852      	addeq	r2, r2, r1
 8003984:	6022      	streq	r2, [r4, #0]
 8003986:	6004      	str	r4, [r0, #0]
 8003988:	e7ec      	b.n	8003964 <_free_r+0x24>
 800398a:	4613      	mov	r3, r2
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	b10a      	cbz	r2, 8003994 <_free_r+0x54>
 8003990:	42a2      	cmp	r2, r4
 8003992:	d9fa      	bls.n	800398a <_free_r+0x4a>
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	1858      	adds	r0, r3, r1
 8003998:	42a0      	cmp	r0, r4
 800399a:	d10b      	bne.n	80039b4 <_free_r+0x74>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	4401      	add	r1, r0
 80039a0:	1858      	adds	r0, r3, r1
 80039a2:	4282      	cmp	r2, r0
 80039a4:	6019      	str	r1, [r3, #0]
 80039a6:	d1dd      	bne.n	8003964 <_free_r+0x24>
 80039a8:	6810      	ldr	r0, [r2, #0]
 80039aa:	6852      	ldr	r2, [r2, #4]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	4401      	add	r1, r0
 80039b0:	6019      	str	r1, [r3, #0]
 80039b2:	e7d7      	b.n	8003964 <_free_r+0x24>
 80039b4:	d902      	bls.n	80039bc <_free_r+0x7c>
 80039b6:	230c      	movs	r3, #12
 80039b8:	602b      	str	r3, [r5, #0]
 80039ba:	e7d3      	b.n	8003964 <_free_r+0x24>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	1821      	adds	r1, r4, r0
 80039c0:	428a      	cmp	r2, r1
 80039c2:	bf04      	itt	eq
 80039c4:	6811      	ldreq	r1, [r2, #0]
 80039c6:	6852      	ldreq	r2, [r2, #4]
 80039c8:	6062      	str	r2, [r4, #4]
 80039ca:	bf04      	itt	eq
 80039cc:	1809      	addeq	r1, r1, r0
 80039ce:	6021      	streq	r1, [r4, #0]
 80039d0:	605c      	str	r4, [r3, #4]
 80039d2:	e7c7      	b.n	8003964 <_free_r+0x24>
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
 80039d6:	bf00      	nop
 80039d8:	200000a0 	.word	0x200000a0

080039dc <_malloc_r>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	1ccd      	adds	r5, r1, #3
 80039e0:	f025 0503 	bic.w	r5, r5, #3
 80039e4:	3508      	adds	r5, #8
 80039e6:	2d0c      	cmp	r5, #12
 80039e8:	bf38      	it	cc
 80039ea:	250c      	movcc	r5, #12
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	4606      	mov	r6, r0
 80039f0:	db01      	blt.n	80039f6 <_malloc_r+0x1a>
 80039f2:	42a9      	cmp	r1, r5
 80039f4:	d903      	bls.n	80039fe <_malloc_r+0x22>
 80039f6:	230c      	movs	r3, #12
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	2000      	movs	r0, #0
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
 80039fe:	f000 f87d 	bl	8003afc <__malloc_lock>
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <_malloc_r+0xac>)
 8003a04:	6814      	ldr	r4, [r2, #0]
 8003a06:	4621      	mov	r1, r4
 8003a08:	b991      	cbnz	r1, 8003a30 <_malloc_r+0x54>
 8003a0a:	4c20      	ldr	r4, [pc, #128]	; (8003a8c <_malloc_r+0xb0>)
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	b91b      	cbnz	r3, 8003a18 <_malloc_r+0x3c>
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 f863 	bl	8003adc <_sbrk_r>
 8003a16:	6020      	str	r0, [r4, #0]
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f000 f85e 	bl	8003adc <_sbrk_r>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d124      	bne.n	8003a6e <_malloc_r+0x92>
 8003a24:	230c      	movs	r3, #12
 8003a26:	6033      	str	r3, [r6, #0]
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 f868 	bl	8003afe <__malloc_unlock>
 8003a2e:	e7e4      	b.n	80039fa <_malloc_r+0x1e>
 8003a30:	680b      	ldr	r3, [r1, #0]
 8003a32:	1b5b      	subs	r3, r3, r5
 8003a34:	d418      	bmi.n	8003a68 <_malloc_r+0x8c>
 8003a36:	2b0b      	cmp	r3, #11
 8003a38:	d90f      	bls.n	8003a5a <_malloc_r+0x7e>
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	50cd      	str	r5, [r1, r3]
 8003a3e:	18cc      	adds	r4, r1, r3
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 f85c 	bl	8003afe <__malloc_unlock>
 8003a46:	f104 000b 	add.w	r0, r4, #11
 8003a4a:	1d23      	adds	r3, r4, #4
 8003a4c:	f020 0007 	bic.w	r0, r0, #7
 8003a50:	1ac3      	subs	r3, r0, r3
 8003a52:	d0d3      	beq.n	80039fc <_malloc_r+0x20>
 8003a54:	425a      	negs	r2, r3
 8003a56:	50e2      	str	r2, [r4, r3]
 8003a58:	e7d0      	b.n	80039fc <_malloc_r+0x20>
 8003a5a:	428c      	cmp	r4, r1
 8003a5c:	684b      	ldr	r3, [r1, #4]
 8003a5e:	bf16      	itet	ne
 8003a60:	6063      	strne	r3, [r4, #4]
 8003a62:	6013      	streq	r3, [r2, #0]
 8003a64:	460c      	movne	r4, r1
 8003a66:	e7eb      	b.n	8003a40 <_malloc_r+0x64>
 8003a68:	460c      	mov	r4, r1
 8003a6a:	6849      	ldr	r1, [r1, #4]
 8003a6c:	e7cc      	b.n	8003a08 <_malloc_r+0x2c>
 8003a6e:	1cc4      	adds	r4, r0, #3
 8003a70:	f024 0403 	bic.w	r4, r4, #3
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d005      	beq.n	8003a84 <_malloc_r+0xa8>
 8003a78:	1a21      	subs	r1, r4, r0
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f000 f82e 	bl	8003adc <_sbrk_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0cf      	beq.n	8003a24 <_malloc_r+0x48>
 8003a84:	6025      	str	r5, [r4, #0]
 8003a86:	e7db      	b.n	8003a40 <_malloc_r+0x64>
 8003a88:	200000a0 	.word	0x200000a0
 8003a8c:	200000a4 	.word	0x200000a4

08003a90 <_realloc_r>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	4607      	mov	r7, r0
 8003a94:	4614      	mov	r4, r2
 8003a96:	460e      	mov	r6, r1
 8003a98:	b921      	cbnz	r1, 8003aa4 <_realloc_r+0x14>
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aa0:	f7ff bf9c 	b.w	80039dc <_malloc_r>
 8003aa4:	b922      	cbnz	r2, 8003ab0 <_realloc_r+0x20>
 8003aa6:	f7ff ff4b 	bl	8003940 <_free_r>
 8003aaa:	4625      	mov	r5, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	f000 f826 	bl	8003b00 <_malloc_usable_size_r>
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d20f      	bcs.n	8003ad8 <_realloc_r+0x48>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7ff ff8e 	bl	80039dc <_malloc_r>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d0f2      	beq.n	8003aac <_realloc_r+0x1c>
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4622      	mov	r2, r4
 8003aca:	f7ff ff15 	bl	80038f8 <memcpy>
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff ff35 	bl	8003940 <_free_r>
 8003ad6:	e7e9      	b.n	8003aac <_realloc_r+0x1c>
 8003ad8:	4635      	mov	r5, r6
 8003ada:	e7e7      	b.n	8003aac <_realloc_r+0x1c>

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4c06      	ldr	r4, [pc, #24]	; (8003af8 <_sbrk_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	f7fd faa6 	bl	8001038 <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	200000f8 	.word	0x200000f8

08003afc <__malloc_lock>:
 8003afc:	4770      	bx	lr

08003afe <__malloc_unlock>:
 8003afe:	4770      	bx	lr

08003b00 <_malloc_usable_size_r>:
 8003b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b04:	1f18      	subs	r0, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfbc      	itt	lt
 8003b0a:	580b      	ldrlt	r3, [r1, r0]
 8003b0c:	18c0      	addlt	r0, r0, r3
 8003b0e:	4770      	bx	lr

08003b10 <_init>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr

08003b1c <_fini>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	bf00      	nop
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr
