
USS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005364  08005364  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005364  08005364  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800536c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080053dc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080053dc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fca9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ce  00000000  00000000  0002fd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00031f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026efe  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcac  00000000  00000000  0005a6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eed66  00000000  00000000  0006638a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001550f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  0015516c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051fc 	.word	0x080051fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080051fc 	.word	0x080051fc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <UART2_Init>:
// ===================================================
// PA.0 = UART4_TX (AF8)   |  PA.1 = UART4_RX (AF8)      
// PB.6 = USART1_TX (AF7)  |  PB.7 = USART1_RX (AF7) 
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void UART2_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <UART2_Init+0x40>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <UART2_Init+0x40>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aca:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <UART2_Init+0x40>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <UART2_Init+0x40>)
 8000ad4:	f023 030c 	bic.w	r3, r3, #12
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <UART2_Init+0x40>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <UART2_Init+0x40>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000aec:	f000 f80a 	bl	8000b04 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <UART2_Init+0x44>)
 8000af2:	f000 f843 	bl	8000b7c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40004400 	.word	0x40004400

08000b04 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIODEN;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <UART2_GPIO_Init+0x70>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <UART2_GPIO_Init+0x70>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PD5 = USART2_TX (AF7)
	// PD6 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOD->MODER   &= ~(0xF << (2*5));	// Clear bits
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b1a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b1e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=   0xA << (2*5);      		
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b26:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000b2a:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0]  |=   0x77<< (4*5);       	
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b32:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 8000b36:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOD->OSPEEDR |=   0xF<<(2*5); 					 	
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b3e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000b42:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOD->PUPDR   &= ~(0xF<<(2*5));
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b4a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b4e:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR   |=   0x5<<(2*5);    				
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b56:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b5a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOD->OTYPER  &=  ~(0x3<<5) ;       	
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <UART2_GPIO_Init+0x74>)
 8000b62:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b66:	6053      	str	r3, [r2, #4]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000c00 	.word	0x48000c00

08000b7c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 0201 	bic.w	r2, r3, #1
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f242 028d 	movw	r2, #8333	; 0x208d
 8000bba:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f043 020c 	orr.w	r2, r3, #12
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <USART_Init+0xfc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d129      	bne.n	8000c24 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f043 0220 	orr.w	r2, r3, #32
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 0210 	bic.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 0201 	bic.w	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <USART_Init+0x100>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d10b      	bne.n	8000c44 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <USART_Init+0x104>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <USART_Init+0x104>)
 8000c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c42:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000c50:	bf00      	nop
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f9      	beq.n	8000c52 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000c5e:	bf00      	nop
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f9      	beq.n	8000c60 <USART_Init+0xe4>
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40004c00 	.word	0x40004c00
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40013800 	.word	0x40013800

08000c84 <USART_Read>:


// Changed to non-blocking function that returns 0 if there is
// no character present.
uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if (USARTx->ISR & USART_ISR_RXNE)  // Do we have a character?
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <USART_Read+0x1e>
		// USART resets the RXNE flag automatically after reading DR
		return ((uint8_t)(USARTx->RDR & 0xFF));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	e000      	b.n	8000ca4 <USART_Read+0x20>
		// Reading USART_DR automatically clears the RXNE flag
	else
		return 0 ;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e014      	b.n	8000cec <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000cc2:	bf00      	nop
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f9      	beq.n	8000cc4 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000cde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ce2:	f000 f819 	bl	8000d18 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8e6      	bhi.n	8000cc2 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000cf4:	bf00      	nop
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	61da      	str	r2, [r3, #28]
}   
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2264      	movs	r2, #100	; 0x64
 8000d24:	fb02 f203 	mul.w	r2, r2, r3
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <USART_Delay+0x38>)
 8000d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	0852      	lsrs	r2, r2, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f9      	bne.n	8000d38 <USART_Delay+0x20>
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	24924925 	.word	0x24924925

08000d54 <COMMAND_Init>:

//Red LED Flash State
static int PID_LOOP=0;
volatile static int READ_COUNT=0;

void COMMAND_Init(void){
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b08b      	sub	sp, #44	; 0x2c
 8000d58:	af00      	add	r7, sp, #0
	//Set buffer size of command input
	int bufferSize = 20;
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24

	//Create buffer array
	uint8_t buffer[bufferSize];
 8000d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d60:	1e43      	subs	r3, r0, #1
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	4603      	mov	r3, r0
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	f04f 0400 	mov.w	r4, #0
 8000d74:	00d4      	lsls	r4, r2, #3
 8000d76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d7a:	00cb      	lsls	r3, r1, #3
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	f04f 0400 	mov.w	r4, #0
 8000d8c:	00d4      	lsls	r4, r2, #3
 8000d8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d92:	00cb      	lsls	r3, r1, #3
 8000d94:	4603      	mov	r3, r0
 8000d96:	3307      	adds	r3, #7
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000da0:	466b      	mov	r3, sp
 8000da2:	3300      	adds	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]

	//Counter to load read value into buffer index
	int bf_count = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]

	//Start command input loop
	setFan(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fb1c 	bl	80013e8 <setFan>

 	 set_P(-0.98);
 8000db0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000e7c <COMMAND_Init+0x128>
 8000db4:	f000 fcb8 	bl	8001728 <set_P>
 	 set_I(-0.0125);
 8000db8:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000e80 <COMMAND_Init+0x12c>
 8000dbc:	f000 fcc8 	bl	8001750 <set_I>
 	 set_D(-1.1);
 8000dc0:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8000e84 <COMMAND_Init+0x130>
 8000dc4:	f000 fcd8 	bl	8001778 <set_D>
 	 //set_I(-0.006);
 	 //set_D(-1.3);

 	 while(1){
 		//Read byte and save
 		char rxByte = USART_Read(USART2);
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <COMMAND_Init+0x134>)
 8000dca:	f7ff ff5b 	bl	8000c84 <USART_Read>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
		//Pass byte, buffer, and count to helper functions
		Read_Buffer(&rxByte, buffer, &bf_count);
 8000dd2:	69f9      	ldr	r1, [r7, #28]
 8000dd4:	f107 0210 	add.w	r2, r7, #16
 8000dd8:	f107 030f 	add.w	r3, r7, #15
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f9c9 	bl	8001174 <Read_Buffer>
		Handle_Backspace(&rxByte, buffer, &bf_count);
 8000de2:	69f9      	ldr	r1, [r7, #28]
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	f107 030f 	add.w	r3, r7, #15
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fa43 	bl	8001278 <Handle_Backspace>
		Write_To_Buffer(&rxByte, buffer, &bf_count, bufferSize);
 8000df2:	69f9      	ldr	r1, [r7, #28]
 8000df4:	f107 0210 	add.w	r2, r7, #16
 8000df8:	f107 000f 	add.w	r0, r7, #15
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	f000 f9ef 	bl	80011e0 <Write_To_Buffer>

	  	 HCSR04_Read();
 8000e02:	f000 ffdd 	bl	8001dc0 <HCSR04_Read>
	  	 HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f001 f898 	bl	8001f3c <HAL_Delay>
	  	 uint16_t distance = getDistance();
 8000e0c:	f000 ffcc 	bl	8001da8 <getDistance>
 8000e10:	4603      	mov	r3, r0
 8000e12:	837b      	strh	r3, [r7, #26]

		 if(PID_LOOP){
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <COMMAND_Init+0x138>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <COMMAND_Init+0xd8>

	 	  	 int pwm = calcFan(distance);
 8000e1c:	8b7b      	ldrh	r3, [r7, #26]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fce4 	bl	80017ec <calcFan>
 8000e24:	6178      	str	r0, [r7, #20]
	 	  	 setFan(pwm);
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f000 fade 	bl	80013e8 <setFan>
		 }
		 if(READ_COUNT==20){
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <COMMAND_Init+0x13c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b14      	cmp	r3, #20
 8000e32:	d11d      	bne.n	8000e70 <COMMAND_Init+0x11c>
		 	  	char str[12];
		 		 sprintf(str, "%d", distance);
 8000e34:	8b7a      	ldrh	r2, [r7, #26]
 8000e36:	463b      	mov	r3, r7
 8000e38:	4916      	ldr	r1, [pc, #88]	; (8000e94 <COMMAND_Init+0x140>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fdd8 	bl	80049f0 <siprintf>
		 		 USART_Write(USART2, (uint8_t*)"Position: ", 10);
 8000e40:	220a      	movs	r2, #10
 8000e42:	4915      	ldr	r1, [pc, #84]	; (8000e98 <COMMAND_Init+0x144>)
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <COMMAND_Init+0x134>)
 8000e46:	f7ff ff33 	bl	8000cb0 <USART_Write>
		 		 USART_Write(USART2, (uint8_t*)str, 4);
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <COMMAND_Init+0x134>)
 8000e52:	f7ff ff2d 	bl	8000cb0 <USART_Write>
		 		 USART_Write(USART2, (uint8_t*)"cm", 2);
 8000e56:	2202      	movs	r2, #2
 8000e58:	4910      	ldr	r1, [pc, #64]	; (8000e9c <COMMAND_Init+0x148>)
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <COMMAND_Init+0x134>)
 8000e5c:	f7ff ff28 	bl	8000cb0 <USART_Write>
		 		 USART_Write(USART2, (uint8_t*)"\r\n", 2);
 8000e60:	2202      	movs	r2, #2
 8000e62:	490f      	ldr	r1, [pc, #60]	; (8000ea0 <COMMAND_Init+0x14c>)
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <COMMAND_Init+0x134>)
 8000e66:	f7ff ff23 	bl	8000cb0 <USART_Write>
		 		 READ_COUNT=0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <COMMAND_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
		 }
		 READ_COUNT++;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <COMMAND_Init+0x13c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <COMMAND_Init+0x13c>)
 8000e78:	6013      	str	r3, [r2, #0]
 	 while(1){
 8000e7a:	e7a5      	b.n	8000dc8 <COMMAND_Init+0x74>
 8000e7c:	bf7ae148 	.word	0xbf7ae148
 8000e80:	bc4ccccd 	.word	0xbc4ccccd
 8000e84:	bf8ccccd 	.word	0xbf8ccccd
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	20000090 	.word	0x20000090
 8000e94:	08005214 	.word	0x08005214
 8000e98:	08005218 	.word	0x08005218
 8000e9c:	08005224 	.word	0x08005224
 8000ea0:	08005228 	.word	0x08005228

08000ea4 <Process_Input>:
 	 }

}

//After passing in a buffer, check if the bytes represent a valid command
void Process_Input(uint8_t* buffer){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	char* invalid_msg = "Invalid command\r\n";
 8000eac:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <Process_Input+0x130>)
 8000eae:	60fb      	str	r3, [r7, #12]
	char* command = (char*) buffer;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60bb      	str	r3, [r7, #8]

	//Handle input commands
	if(strcmp(command, "FANON") == 0){
 8000eb4:	4948      	ldr	r1, [pc, #288]	; (8000fd8 <Process_Input+0x134>)
 8000eb6:	68b8      	ldr	r0, [r7, #8]
 8000eb8:	f7ff f98a 	bl	80001d0 <strcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <Process_Input+0x2e>
				FAN_ON();
 8000ec2:	f000 f8af 	bl	8001024 <FAN_ON>
				USART_Write(USART2, (uint8_t*)"FAN 100%\r\n", 11);
 8000ec6:	220b      	movs	r2, #11
 8000ec8:	4944      	ldr	r1, [pc, #272]	; (8000fdc <Process_Input+0x138>)
 8000eca:	4845      	ldr	r0, [pc, #276]	; (8000fe0 <Process_Input+0x13c>)
 8000ecc:	f7ff fef0 	bl	8000cb0 <USART_Write>
		USART_Write(USART2, (uint8_t*)"PID 80\r\n", 11);
	}else{
				USART_Write(USART2, (uint8_t*)invalid_msg,20);
	}

}
 8000ed0:	e07c      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "FANOFF") == 0){
 8000ed2:	4944      	ldr	r1, [pc, #272]	; (8000fe4 <Process_Input+0x140>)
 8000ed4:	68b8      	ldr	r0, [r7, #8]
 8000ed6:	f7ff f97b 	bl	80001d0 <strcmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d107      	bne.n	8000ef0 <Process_Input+0x4c>
				FAN_OFF();
 8000ee0:	f000 f8ac 	bl	800103c <FAN_OFF>
				USART_Write(USART2, (uint8_t*)"FAN Off\r\n", 11);
 8000ee4:	220b      	movs	r2, #11
 8000ee6:	4940      	ldr	r1, [pc, #256]	; (8000fe8 <Process_Input+0x144>)
 8000ee8:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <Process_Input+0x13c>)
 8000eea:	f7ff fee1 	bl	8000cb0 <USART_Write>
}
 8000eee:	e06d      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "FAN20") == 0){
 8000ef0:	493e      	ldr	r1, [pc, #248]	; (8000fec <Process_Input+0x148>)
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f7ff f96c 	bl	80001d0 <strcmp>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <Process_Input+0x6a>
				FAN_20();
 8000efe:	f000 f8a9 	bl	8001054 <FAN_20>
				USART_Write(USART2, (uint8_t*)"FAN 20%\r\n", 11);
 8000f02:	220b      	movs	r2, #11
 8000f04:	493a      	ldr	r1, [pc, #232]	; (8000ff0 <Process_Input+0x14c>)
 8000f06:	4836      	ldr	r0, [pc, #216]	; (8000fe0 <Process_Input+0x13c>)
 8000f08:	f7ff fed2 	bl	8000cb0 <USART_Write>
}
 8000f0c:	e05e      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "FAN80") == 0){
 8000f0e:	4939      	ldr	r1, [pc, #228]	; (8000ff4 <Process_Input+0x150>)
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f7ff f95d 	bl	80001d0 <strcmp>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d107      	bne.n	8000f2c <Process_Input+0x88>
				FAN_80();
 8000f1c:	f000 f8a6 	bl	800106c <FAN_80>
				USART_Write(USART2, (uint8_t*)"FAN 80%\r\n", 11);
 8000f20:	220b      	movs	r2, #11
 8000f22:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <Process_Input+0x154>)
 8000f24:	482e      	ldr	r0, [pc, #184]	; (8000fe0 <Process_Input+0x13c>)
 8000f26:	f7ff fec3 	bl	8000cb0 <USART_Write>
}
 8000f2a:	e04f      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "PID30") == 0){
 8000f2c:	4933      	ldr	r1, [pc, #204]	; (8000ffc <Process_Input+0x158>)
 8000f2e:	68b8      	ldr	r0, [r7, #8]
 8000f30:	f7ff f94e 	bl	80001d0 <strcmp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <Process_Input+0xa6>
		PID_30();
 8000f3a:	f000 f8a3 	bl	8001084 <PID_30>
		USART_Write(USART2, (uint8_t*)"PID 30\r\n", 11);
 8000f3e:	220b      	movs	r2, #11
 8000f40:	492f      	ldr	r1, [pc, #188]	; (8001000 <Process_Input+0x15c>)
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <Process_Input+0x13c>)
 8000f44:	f7ff feb4 	bl	8000cb0 <USART_Write>
}
 8000f48:	e040      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "PID60") == 0){
 8000f4a:	492e      	ldr	r1, [pc, #184]	; (8001004 <Process_Input+0x160>)
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f7ff f93f 	bl	80001d0 <strcmp>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <Process_Input+0xc4>
		PID_60();
 8000f58:	f000 f8ac 	bl	80010b4 <PID_60>
		USART_Write(USART2, (uint8_t*)"PID 60\r\n", 11);
 8000f5c:	220b      	movs	r2, #11
 8000f5e:	492a      	ldr	r1, [pc, #168]	; (8001008 <Process_Input+0x164>)
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <Process_Input+0x13c>)
 8000f62:	f7ff fea5 	bl	8000cb0 <USART_Write>
}
 8000f66:	e031      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "PID5") == 0){
 8000f68:	4928      	ldr	r1, [pc, #160]	; (800100c <Process_Input+0x168>)
 8000f6a:	68b8      	ldr	r0, [r7, #8]
 8000f6c:	f7ff f930 	bl	80001d0 <strcmp>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d107      	bne.n	8000f86 <Process_Input+0xe2>
		PID_5();
 8000f76:	f000 f8b5 	bl	80010e4 <PID_5>
		USART_Write(USART2, (uint8_t*)"PID 5\r\n", 11);
 8000f7a:	220b      	movs	r2, #11
 8000f7c:	4924      	ldr	r1, [pc, #144]	; (8001010 <Process_Input+0x16c>)
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <Process_Input+0x13c>)
 8000f80:	f7ff fe96 	bl	8000cb0 <USART_Write>
}
 8000f84:	e022      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "PID50") == 0){
 8000f86:	4923      	ldr	r1, [pc, #140]	; (8001014 <Process_Input+0x170>)
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff f921 	bl	80001d0 <strcmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d107      	bne.n	8000fa4 <Process_Input+0x100>
		PID_50();
 8000f94:	f000 f8be 	bl	8001114 <PID_50>
		USART_Write(USART2, (uint8_t*)"PID 50\r\n", 11);
 8000f98:	220b      	movs	r2, #11
 8000f9a:	491f      	ldr	r1, [pc, #124]	; (8001018 <Process_Input+0x174>)
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <Process_Input+0x13c>)
 8000f9e:	f7ff fe87 	bl	8000cb0 <USART_Write>
}
 8000fa2:	e013      	b.n	8000fcc <Process_Input+0x128>
	}else if(strcmp(command, "PID80") == 0){
 8000fa4:	491d      	ldr	r1, [pc, #116]	; (800101c <Process_Input+0x178>)
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f7ff f912 	bl	80001d0 <strcmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <Process_Input+0x11e>
		PID_80();
 8000fb2:	f000 f8c7 	bl	8001144 <PID_80>
		USART_Write(USART2, (uint8_t*)"PID 80\r\n", 11);
 8000fb6:	220b      	movs	r2, #11
 8000fb8:	4919      	ldr	r1, [pc, #100]	; (8001020 <Process_Input+0x17c>)
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <Process_Input+0x13c>)
 8000fbc:	f7ff fe78 	bl	8000cb0 <USART_Write>
}
 8000fc0:	e004      	b.n	8000fcc <Process_Input+0x128>
				USART_Write(USART2, (uint8_t*)invalid_msg,20);
 8000fc2:	2214      	movs	r2, #20
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <Process_Input+0x13c>)
 8000fc8:	f7ff fe72 	bl	8000cb0 <USART_Write>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800522c 	.word	0x0800522c
 8000fd8:	08005240 	.word	0x08005240
 8000fdc:	08005248 	.word	0x08005248
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	08005254 	.word	0x08005254
 8000fe8:	0800525c 	.word	0x0800525c
 8000fec:	08005268 	.word	0x08005268
 8000ff0:	08005270 	.word	0x08005270
 8000ff4:	0800527c 	.word	0x0800527c
 8000ff8:	08005284 	.word	0x08005284
 8000ffc:	08005290 	.word	0x08005290
 8001000:	08005298 	.word	0x08005298
 8001004:	080052a4 	.word	0x080052a4
 8001008:	080052ac 	.word	0x080052ac
 800100c:	080052b8 	.word	0x080052b8
 8001010:	080052c0 	.word	0x080052c0
 8001014:	080052c8 	.word	0x080052c8
 8001018:	080052d0 	.word	0x080052d0
 800101c:	080052dc 	.word	0x080052dc
 8001020:	080052e4 	.word	0x080052e4

08001024 <FAN_ON>:

void FAN_ON(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	PID_LOOP=0;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <FAN_ON+0x14>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	startFan();
 800102e:	f000 f951 	bl	80012d4 <startFan>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000008c 	.word	0x2000008c

0800103c <FAN_OFF>:

void FAN_OFF(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	PID_LOOP=0;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <FAN_OFF+0x14>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
	stopFan();
 8001046:	f000 f967 	bl	8001318 <stopFan>

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <FAN_20>:

void FAN_20(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	PID_LOOP=0;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <FAN_20+0x14>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
	fan20();
 800105e:	f000 f97d 	bl	800135c <fan20>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000008c 	.word	0x2000008c

0800106c <FAN_80>:

void FAN_80(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	PID_LOOP=0;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <FAN_80+0x14>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	fan80();
 8001076:	f000 f993 	bl	80013a0 <fan80>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000008c 	.word	0x2000008c

08001084 <PID_30>:

void PID_30(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	PID_LOOP=1;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <PID_30+0x2c>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
	clearPID();
 800108e:	f000 fb97 	bl	80017c0 <clearPID>
	setFan(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f000 f9a8 	bl	80013e8 <setFan>
 	HAL_Delay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f000 ff4e 	bl	8001f3c <HAL_Delay>
	setPoint(30);
 80010a0:	201e      	movs	r0, #30
 80010a2:	f000 fb7d 	bl	80017a0 <setPoint>
	PID_LOOP=1;
 80010a6:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <PID_30+0x2c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000008c 	.word	0x2000008c

080010b4 <PID_60>:

void PID_60(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	PID_LOOP=1;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <PID_60+0x2c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
	clearPID();
 80010be:	f000 fb7f 	bl	80017c0 <clearPID>
	setFan(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f000 f990 	bl	80013e8 <setFan>
 	HAL_Delay(1000);
 80010c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010cc:	f000 ff36 	bl	8001f3c <HAL_Delay>
	setPoint(60);
 80010d0:	203c      	movs	r0, #60	; 0x3c
 80010d2:	f000 fb65 	bl	80017a0 <setPoint>
	PID_LOOP=1;
 80010d6:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <PID_60+0x2c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000008c 	.word	0x2000008c

080010e4 <PID_5>:

void PID_5(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	PID_LOOP=1;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <PID_5+0x2c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
	clearPID();
 80010ee:	f000 fb67 	bl	80017c0 <clearPID>
	setFan(100);
 80010f2:	2064      	movs	r0, #100	; 0x64
 80010f4:	f000 f978 	bl	80013e8 <setFan>
 	HAL_Delay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f000 ff1e 	bl	8001f3c <HAL_Delay>
	setPoint(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f000 fb4d 	bl	80017a0 <setPoint>
	PID_LOOP=1;
 8001106:	4b02      	ldr	r3, [pc, #8]	; (8001110 <PID_5+0x2c>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000008c 	.word	0x2000008c

08001114 <PID_50>:
void PID_50(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	PID_LOOP=1;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <PID_50+0x2c>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
	clearPID();
 800111e:	f000 fb4f 	bl	80017c0 <clearPID>
	setFan(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f000 f960 	bl	80013e8 <setFan>
 	HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f000 ff06 	bl	8001f3c <HAL_Delay>
	setPoint(50);
 8001130:	2032      	movs	r0, #50	; 0x32
 8001132:	f000 fb35 	bl	80017a0 <setPoint>
	PID_LOOP=1;
 8001136:	4b02      	ldr	r3, [pc, #8]	; (8001140 <PID_50+0x2c>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000008c 	.word	0x2000008c

08001144 <PID_80>:

void PID_80(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	PID_LOOP=1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <PID_80+0x2c>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
	clearPID();
 800114e:	f000 fb37 	bl	80017c0 <clearPID>
	setFan(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f000 f948 	bl	80013e8 <setFan>
 	HAL_Delay(1000);
 8001158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115c:	f000 feee 	bl	8001f3c <HAL_Delay>
	setPoint(80);
 8001160:	2050      	movs	r0, #80	; 0x50
 8001162:	f000 fb1d 	bl	80017a0 <setPoint>
	PID_LOOP=1;
 8001166:	4b02      	ldr	r3, [pc, #8]	; (8001170 <PID_80+0x2c>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000008c 	.word	0x2000008c

08001174 <Read_Buffer>:
void Read_Buffer(char* rxByte, uint8_t* buffer, int *bf_count){
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]

		//Set string used to write out new line
		char newLineStr[] = "\r\n";
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <Read_Buffer+0x64>)
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	8019      	strh	r1, [r3, #0]
 800118c:	3302      	adds	r3, #2
 800118e:	0c12      	lsrs	r2, r2, #16
 8001190:	701a      	strb	r2, [r3, #0]

		//If a carriage return is read, write a new line and process the preceding command
		if(*rxByte == '\r'){
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b0d      	cmp	r3, #13
 8001198:	d119      	bne.n	80011ce <Read_Buffer+0x5a>
			USART_Write(USART2,(uint8_t *)newLineStr,2);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2202      	movs	r2, #2
 80011a0:	4619      	mov	r1, r3
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <Read_Buffer+0x68>)
 80011a4:	f7ff fd84 	bl	8000cb0 <USART_Write>
			buffer[*bf_count] = '\0';
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
			Process_Input(buffer);
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe74 	bl	8000ea4 <Process_Input>
			memset(buffer, 0, sizeof(&buffer));
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2204      	movs	r2, #4
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fc0c 	bl	80049e0 <memset>
			*bf_count = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
		}
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08005228 	.word	0x08005228
 80011dc:	40004400 	.word	0x40004400

080011e0 <Write_To_Buffer>:

void Write_To_Buffer(char* rxByte, uint8_t* buffer, int *bf_count, int bufferSize){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
		//Add every character that isn't a new line or backspace/delete input to the buffer if the buffer isn't full
		if(*rxByte != 0 & *bf_count < bufferSize & *rxByte !='\r' & *rxByte !='\b' & *rxByte != 127){
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	4299      	cmp	r1, r3
 8001204:	bfcc      	ite	gt
 8001206:	2301      	movgt	r3, #1
 8001208:	2300      	movle	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4013      	ands	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0d      	cmp	r3, #13
 8001218:	bf14      	ite	ne
 800121a:	2301      	movne	r3, #1
 800121c:	2300      	moveq	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4013      	ands	r3, r2
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	2a08      	cmp	r2, #8
 8001228:	bf14      	ite	ne
 800122a:	2201      	movne	r2, #1
 800122c:	2200      	moveq	r2, #0
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4013      	ands	r3, r2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	2a7f      	cmp	r2, #127	; 0x7f
 8001238:	bf14      	ite	ne
 800123a:	2201      	movne	r2, #1
 800123c:	2200      	moveq	r2, #0
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d011      	beq.n	800126a <Write_To_Buffer+0x8a>
			buffer[*bf_count] = *rxByte;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	701a      	strb	r2, [r3, #0]
			USART_Write(USART2, (uint8_t*)rxByte,1);
 8001256:	2201      	movs	r2, #1
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <Write_To_Buffer+0x94>)
 800125c:	f7ff fd28 	bl	8000cb0 <USART_Write>
			*bf_count = *bf_count + 1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
		}
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40004400 	.word	0x40004400

08001278 <Handle_Backspace>:

void Handle_Backspace(char* rxByte, uint8_t* buffer, int* bf_count){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]

		//If a delete key was read, write the input on the frontend but delete the previous index in the buffer and decerement the counter
		if(*rxByte == 127 & bf_count > 0){
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b7f      	cmp	r3, #127	; 0x7f
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d010      	beq.n	80012c8 <Handle_Backspace+0x50>
			USART_Write(USART2,(uint8_t*) rxByte,1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <Handle_Backspace+0x58>)
 80012ac:	f7ff fd00 	bl	8000cb0 <USART_Write>
			*bf_count = *bf_count - 1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
			buffer[*bf_count] = 0;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		}
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40004400 	.word	0x40004400

080012d4 <startFan>:
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_tim.h"

TIM_HandleTypeDef htim2;

void startFan(void){
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b093      	sub	sp, #76	; 0x4c
 80012d8:	af12      	add	r7, sp, #72	; 0x48
	setPWM(htim2,TIM_CHANNEL_2,200,200);
 80012da:	4e0e      	ldr	r6, [pc, #56]	; (8001314 <startFan+0x40>)
 80012dc:	23c8      	movs	r3, #200	; 0xc8
 80012de:	9311      	str	r3, [sp, #68]	; 0x44
 80012e0:	23c8      	movs	r3, #200	; 0xc8
 80012e2:	9310      	str	r3, [sp, #64]	; 0x40
 80012e4:	2304      	movs	r3, #4
 80012e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80012e8:	466d      	mov	r5, sp
 80012ea:	f106 0410 	add.w	r4, r6, #16
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001302:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001306:	f000 faeb 	bl	80018e0 <setPWM>
}
 800130a:	bf00      	nop
 800130c:	3704      	adds	r7, #4
 800130e:	46bd      	mov	sp, r7
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	bf00      	nop
 8001314:	200000dc 	.word	0x200000dc

08001318 <stopFan>:

void stopFan(void){
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b093      	sub	sp, #76	; 0x4c
 800131c:	af12      	add	r7, sp, #72	; 0x48
	setPWM(htim2,TIM_CHANNEL_2,200,0);
 800131e:	4e0e      	ldr	r6, [pc, #56]	; (8001358 <stopFan+0x40>)
 8001320:	2300      	movs	r3, #0
 8001322:	9311      	str	r3, [sp, #68]	; 0x44
 8001324:	23c8      	movs	r3, #200	; 0xc8
 8001326:	9310      	str	r3, [sp, #64]	; 0x40
 8001328:	2304      	movs	r3, #4
 800132a:	930f      	str	r3, [sp, #60]	; 0x3c
 800132c:	466d      	mov	r5, sp
 800132e:	f106 0410 	add.w	r4, r6, #16
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001342:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001346:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800134a:	f000 fac9 	bl	80018e0 <setPWM>

}
 800134e:	bf00      	nop
 8001350:	3704      	adds	r7, #4
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	bf00      	nop
 8001358:	200000dc 	.word	0x200000dc

0800135c <fan20>:

void fan20(void){
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b093      	sub	sp, #76	; 0x4c
 8001360:	af12      	add	r7, sp, #72	; 0x48
	setPWM(htim2,TIM_CHANNEL_2,200,40);
 8001362:	4e0e      	ldr	r6, [pc, #56]	; (800139c <fan20+0x40>)
 8001364:	2328      	movs	r3, #40	; 0x28
 8001366:	9311      	str	r3, [sp, #68]	; 0x44
 8001368:	23c8      	movs	r3, #200	; 0xc8
 800136a:	9310      	str	r3, [sp, #64]	; 0x40
 800136c:	2304      	movs	r3, #4
 800136e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001370:	466d      	mov	r5, sp
 8001372:	f106 0410 	add.w	r4, r6, #16
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001382:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001386:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800138a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800138e:	f000 faa7 	bl	80018e0 <setPWM>
}
 8001392:	bf00      	nop
 8001394:	3704      	adds	r7, #4
 8001396:	46bd      	mov	sp, r7
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	bf00      	nop
 800139c:	200000dc 	.word	0x200000dc

080013a0 <fan80>:

void fan80(void){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b093      	sub	sp, #76	; 0x4c
 80013a4:	af12      	add	r7, sp, #72	; 0x48
	setPWM(htim2,TIM_CHANNEL_2,200,160);
 80013a6:	4e0e      	ldr	r6, [pc, #56]	; (80013e0 <fan80+0x40>)
 80013a8:	23a0      	movs	r3, #160	; 0xa0
 80013aa:	9311      	str	r3, [sp, #68]	; 0x44
 80013ac:	23c8      	movs	r3, #200	; 0xc8
 80013ae:	9310      	str	r3, [sp, #64]	; 0x40
 80013b0:	2304      	movs	r3, #4
 80013b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80013b4:	466d      	mov	r5, sp
 80013b6:	f106 0410 	add.w	r4, r6, #16
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013d2:	f000 fa85 	bl	80018e0 <setPWM>
}
 80013d6:	bf00      	nop
 80013d8:	3704      	adds	r7, #4
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000dc 	.word	0x200000dc
 80013e4:	00000000 	.word	0x00000000

080013e8 <setFan>:

void setFan(int speed){
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b095      	sub	sp, #84	; 0x54
 80013ec:	af12      	add	r7, sp, #72	; 0x48
 80013ee:	6078      	str	r0, [r7, #4]
	if(speed > -1 && speed < 101){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db32      	blt.n	800145c <setFan+0x74>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	dc2f      	bgt.n	800145c <setFan+0x74>
		setPWM(htim2,TIM_CHANNEL_2,200,speed*1.25 + 75);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff f899 	bl	8000534 <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <setFan+0x88>)
 8001408:	f7ff f8fe 	bl	8000608 <__aeabi_dmul>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4618      	mov	r0, r3
 8001412:	4621      	mov	r1, r4
 8001414:	a314      	add	r3, pc, #80	; (adr r3, 8001468 <setFan+0x80>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7fe ff3f 	bl	800029c <__adddf3>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	4618      	mov	r0, r3
 8001424:	4621      	mov	r1, r4
 8001426:	f7ff fb29 	bl	8000a7c <__aeabi_d2uiz>
 800142a:	4603      	mov	r3, r0
 800142c:	b29b      	uxth	r3, r3
 800142e:	4e11      	ldr	r6, [pc, #68]	; (8001474 <setFan+0x8c>)
 8001430:	9311      	str	r3, [sp, #68]	; 0x44
 8001432:	23c8      	movs	r3, #200	; 0xc8
 8001434:	9310      	str	r3, [sp, #64]	; 0x40
 8001436:	2304      	movs	r3, #4
 8001438:	930f      	str	r3, [sp, #60]	; 0x3c
 800143a:	466d      	mov	r5, sp
 800143c:	f106 0410 	add.w	r4, r6, #16
 8001440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001450:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001454:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001458:	f000 fa42 	bl	80018e0 <setPWM>
	}


}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	4052c000 	.word	0x4052c000
 8001470:	3ff40000 	.word	0x3ff40000
 8001474:	200000dc 	.word	0x200000dc

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fce9 	bl	8001e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f814 	bl	80014ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART2_Init();
 8001484:	f7ff fb1a 	bl	8000abc <UART2_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f000 f914 	bl	80016b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800148c:	f000 f860 	bl	8001550 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001490:	f000 f8b8 	bl	8001604 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001494:	2104      	movs	r1, #4
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <main+0x30>)
 8001498:	f002 f8a6 	bl	80035e8 <HAL_TIM_IC_Start_IT>
  COMMAND_Init();
 800149c:	f7ff fc5a 	bl	8000d54 <COMMAND_Init>
 80014a0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000128 	.word	0x20000128

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b096      	sub	sp, #88	; 0x58
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2244      	movs	r2, #68	; 0x44
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fa90 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014ce:	2310      	movs	r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d2:	2301      	movs	r3, #1
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e2:	2301      	movs	r3, #1
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014ea:	2328      	movs	r3, #40	; 0x28
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ee:	2307      	movs	r3, #7
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f874 	bl	80025ec <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800150a:	f000 f905 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fc46 	bl	8002db8 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001532:	f000 f8f1 	bl	8001718 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800153a:	f001 f801 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001544:	f000 f8e8 	bl	8001718 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3758      	adds	r7, #88	; 0x58
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <MX_TIM1_Init+0xac>)
 8001570:	4a23      	ldr	r2, [pc, #140]	; (8001600 <MX_TIM1_Init+0xb0>)
 8001572:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM1_Init+0xac>)
 8001576:	2250      	movs	r2, #80	; 0x50
 8001578:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_TIM1_Init+0xac>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM1_Init+0xac>)
 8001582:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001586:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM1_Init+0xac>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_TIM1_Init+0xac>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM1_Init+0xac>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <MX_TIM1_Init+0xac>)
 800159c:	f001 ffcc 	bl	8003538 <HAL_TIM_IC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015a6:	f000 f8b7 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	480f      	ldr	r0, [pc, #60]	; (80015fc <MX_TIM1_Init+0xac>)
 80015be:	f003 f93f 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f000 f8a6 	bl	8001718 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM1_Init+0xac>)
 80015e4:	f002 fa61 	bl	8003aaa <HAL_TIM_IC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80015ee:	f000 f893 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000128 	.word	0x20000128
 8001600:	40012c00 	.word	0x40012c00

08001604 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_TIM2_Init+0xac>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001632:	2250      	movs	r2, #80	; 0x50
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_TIM2_Init+0xac>)
 800163e:	22c8      	movs	r2, #200	; 0xc8
 8001640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_TIM2_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001650:	f001 fd7e 	bl	8003150 <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800165a:	f000 f85d 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <MX_TIM2_Init+0xac>)
 800166e:	f003 f8e7 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001678:	f000 f84e 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167c:	2360      	movs	r3, #96	; 0x60
 800167e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2204      	movs	r2, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001694:	f002 fa9e 	bl	8003bd4 <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800169e:	f000 f83b 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MX_TIM2_Init+0xac>)
 80016a4:	f000 f9e6 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200000dc 	.word	0x200000dc

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_GPIO_Init+0x5c>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <MX_GPIO_Init+0x60>)
 80016e8:	f000 ff04 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_GPIO_Init+0x60>)
 8001704:	f000 fd4e 	bl	80021a4 <HAL_GPIO_Init>

}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	48001000 	.word	0x48001000

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <set_P>:
int point = 0;
int integral = 0;
int derivative = 0;
int last_error = 0;

void set_P(float p){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a01 	vstr	s0, [r7, #4]
	Kp = p;
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff10 	bl	8000558 <__aeabi_f2d>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <set_P+0x24>)
 800173e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000098 	.word	0x20000098

08001750 <set_I>:

void set_I(float i){
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
	Ki = i;
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <set_I+0x24>)
 8001766:	e9c2 3400 	strd	r3, r4, [r2]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	200000a0 	.word	0x200000a0

08001778 <set_D>:

void set_D(float d){
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
	Kd = d;
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fee8 	bl	8000558 <__aeabi_f2d>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <set_D+0x24>)
 800178e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	200000a8 	.word	0x200000a8

080017a0 <setPoint>:

void setPoint(int p){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	point = p;
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <setPoint+0x1c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200000b0 	.word	0x200000b0

080017c0 <clearPID>:

void clearPID(void){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	integral = 0;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <clearPID+0x20>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	derivative = 0;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <clearPID+0x24>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	last_error = 0;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <clearPID+0x28>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	200000b4 	.word	0x200000b4
 80017e4:	200000b8 	.word	0x200000b8
 80017e8:	200000bc 	.word	0x200000bc

080017ec <calcFan>:

int calcFan(uint16_t distance){
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]

	int error = point - distance;
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <calcFan+0xd8>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	60bb      	str	r3, [r7, #8]
	integral = integral + error;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <calcFan+0xdc>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <calcFan+0xdc>)
 800180a:	6013      	str	r3, [r2, #0]
	derivative = error - last_error;
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <calcFan+0xe0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <calcFan+0xe4>)
 8001816:	6013      	str	r3, [r2, #0]

	int pwm = ((Kp * error) + (Ki * integral ) + (Kd * derivative));
 8001818:	68b8      	ldr	r0, [r7, #8]
 800181a:	f7fe fe8b 	bl	8000534 <__aeabi_i2d>
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <calcFan+0xe8>)
 8001820:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	f7fe feee 	bl	8000608 <__aeabi_dmul>
 800182c:	4603      	mov	r3, r0
 800182e:	460c      	mov	r4, r1
 8001830:	461d      	mov	r5, r3
 8001832:	4626      	mov	r6, r4
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <calcFan+0xdc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe7b 	bl	8000534 <__aeabi_i2d>
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <calcFan+0xec>)
 8001840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	f7fe fede 	bl	8000608 <__aeabi_dmul>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	4628      	mov	r0, r5
 8001856:	4631      	mov	r1, r6
 8001858:	f7fe fd20 	bl	800029c <__adddf3>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	461d      	mov	r5, r3
 8001862:	4626      	mov	r6, r4
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <calcFan+0xe4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_i2d>
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <calcFan+0xf0>)
 8001870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	f7fe fec6 	bl	8000608 <__aeabi_dmul>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	4628      	mov	r0, r5
 8001886:	4631      	mov	r1, r6
 8001888:	f7fe fd08 	bl	800029c <__adddf3>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	4618      	mov	r0, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f7ff f8ca 	bl	8000a2c <__aeabi_d2iz>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

	if(pwm > 100){
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	dd02      	ble.n	80018a8 <calcFan+0xbc>
		pwm = 100;
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e004      	b.n	80018b2 <calcFan+0xc6>
	}else if (pwm < 0){
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da01      	bge.n	80018b2 <calcFan+0xc6>
		pwm = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
	}

	last_error = error;
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <calcFan+0xe0>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	6013      	str	r3, [r2, #0]

	return pwm;
 80018b8:	68fb      	ldr	r3, [r7, #12]


}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200000b0 	.word	0x200000b0
 80018c8:	200000b4 	.word	0x200000b4
 80018cc:	200000bc 	.word	0x200000bc
 80018d0:	200000b8 	.word	0x200000b8
 80018d4:	20000098 	.word	0x20000098
 80018d8:	200000a0 	.word	0x200000a0
 80018dc:	200000a8 	.word	0x200000a8

080018e0 <setPWM>:



void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 80018e0:	b084      	sub	sp, #16
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b088      	sub	sp, #32
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80018ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 80018f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80018f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80018f6:	f001 fd89 	bl	800340c <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 80018fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001900:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001904:	f001 fc24 	bl	8003150 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 800190c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001910:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800191e:	4619      	mov	r1, r3
 8001920:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001924:	f002 f956 	bl	8003bd4 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001928:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800192a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800192e:	f001 fc67 	bl	8003200 <HAL_TIM_PWM_Start>
}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800193c:	b004      	add	sp, #16
 800193e:	4770      	bx	lr

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_TIM_IC_MspInit+0xa4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13c      	bne.n	8001a24 <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b4:	6613      	str	r3, [r2, #96]	; 0x60
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_TIM_IC_MspInit+0xa8>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4809      	ldr	r0, [pc, #36]	; (8001a34 <HAL_TIM_IC_MspInit+0xac>)
 8001a10:	f000 fbc8 	bl	80021a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	201b      	movs	r0, #27
 8001a1a:	f000 fb8c 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a1e:	201b      	movs	r0, #27
 8001a20:	f000 fba5 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48001000 	.word	0x48001000

08001a38 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */
  }
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a48:	d10b      	bne.n	8001a62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_TIM_PWM_MspInit+0x38>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_TIM_PWM_MspInit+0x38>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_TIM_PWM_MspInit+0x38>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d11c      	bne.n	8001ad0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0x64>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_TIM_MspPostInit+0x64>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_TIM_MspPostInit+0x64>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f000 fb6a 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f9e4 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_CC_IRQHandler+0x10>)
 8001b3e:	f001 fe95 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000128 	.word	0x20000128

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f002 ff06 	bl	800498c <__errno>
 8001b80:	4602      	mov	r2, r0
 8001b82:	230c      	movs	r3, #12
 8001b84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20018000 	.word	0x20018000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200000c0 	.word	0x200000c0
 8001bb4:	20000180 	.word	0x20000180

08001bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <SystemInit+0x64>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <SystemInit+0x64>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <SystemInit+0x68>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <SystemInit+0x68>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <SystemInit+0x68>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <SystemInit+0x68>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <SystemInit+0x68>)
 8001be4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001be8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <SystemInit+0x68>)
 8001bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SystemInit+0x68>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <SystemInit+0x68>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <SystemInit+0x68>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SystemInit+0x64>)
 8001c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	40021000 	.word	0x40021000

08001c24 <delay>:
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;

void delay (uint16_t time)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <delay+0x2c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8001c36:	bf00      	nop
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <delay+0x2c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3f9      	bcc.n	8001c38 <delay+0x14>
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	20000128 	.word	0x20000128
 8001c54:	00000000 	.word	0x00000000

08001c58 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
static volatile  uint16_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7f1b      	ldrb	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 808b 	bne.w	8001d80 <HAL_TIM_IC_CaptureCallback+0x128>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11a      	bne.n	8001ca8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001c72:	2104      	movs	r1, #4
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 f8bd 	bl	8003df4 <HAL_TIM_ReadCapturedValue>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c7e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c94:	621a      	str	r2, [r3, #32]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0220 	orr.w	r2, r2, #32
 8001ca4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
		}
	}
}
 8001ca6:	e06b      	b.n	8001d80 <HAL_TIM_IC_CaptureCallback+0x128>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d167      	bne.n	8001d80 <HAL_TIM_IC_CaptureCallback+0x128>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f002 f89e 	bl	8003df4 <HAL_TIM_ReadCapturedValue>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cbc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d907      	bls.n	8001ce2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e00f      	b.n	8001d02 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d909      	bls.n	8001d02 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001cfc:	33ff      	adds	r3, #255	; 0xff
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d00:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fc04 	bl	8000514 <__aeabi_ui2d>
 8001d0c:	a31e      	add	r3, pc, #120	; (adr r3, 8001d88 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc79 	bl	8000608 <__aeabi_dmul>
 8001d16:	4603      	mov	r3, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d26:	f7fe fd99 	bl	800085c <__aeabi_ddiv>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	f7fe fea3 	bl	8000a7c <__aeabi_d2uiz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d3c:	801a      	strh	r2, [r3, #0]
			if(Distance > 100){
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d902      	bls.n	8001d4e <HAL_TIM_IC_CaptureCallback+0xf6>
				Distance = 0;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d62:	621a      	str	r2, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a12      	ldr	r2, [r2, #32]
 8001d6e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	60da      	str	r2, [r3, #12]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	b020c49c 	.word	0xb020c49c
 8001d8c:	3fa16872 	.word	0x3fa16872
 8001d90:	200000c4 	.word	0x200000c4
 8001d94:	200000c8 	.word	0x200000c8
 8001d98:	200000cc 	.word	0x200000cc
 8001d9c:	200000d0 	.word	0x200000d0
 8001da0:	200000c6 	.word	0x200000c6
 8001da4:	20000128 	.word	0x20000128

08001da8 <getDistance>:

uint16_t getDistance(void){
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	return Distance;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <getDistance+0x14>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	200000c6 	.word	0x200000c6

08001dc0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HCSR04_Read+0x38>)
 8001dcc:	f000 fb92 	bl	80024f4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f7ff ff27 	bl	8001c24 <delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <HCSR04_Read+0x38>)
 8001dde:	f000 fb89 	bl	80024f4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HCSR04_Read+0x3c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HCSR04_Read+0x3c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	60da      	str	r2, [r3, #12]
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	48001000 	.word	0x48001000
 8001dfc:	20000128 	.word	0x20000128

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e04:	f7ff fed8 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e0a:	e003      	b.n	8001e14 <LoopCopyDataInit>

08001e0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e12:	3104      	adds	r1, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e1c:	d3f6      	bcc.n	8001e0c <CopyDataInit>
	ldr	r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e20:	e002      	b.n	8001e28 <LoopFillZerobss>

08001e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e24:	f842 3b04 	str.w	r3, [r2], #4

08001e28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <LoopForever+0x16>)
	cmp	r2, r3
 8001e2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e2c:	d3f9      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f002 fdb3 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff fb21 	bl	8001478 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e3c:	0800536c 	.word	0x0800536c
	ldr	r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e44:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001e48:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001e4c:	2000017c 	.word	0x2000017c

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>

08001e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f95f 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f80e 	bl	8001e84 <HAL_InitTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e001      	b.n	8001e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e74:	f7ff fd64 	bl	8001940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_InitTick+0x6c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_InitTick+0x70>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_InitTick+0x6c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f96b 	bl	800218a <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d809      	bhi.n	8001ed4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f935 	bl	8002136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_InitTick+0x74>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e004      	b.n	8001ee4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e001      	b.n	8001ee4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000174 	.word	0x20000174

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000174 	.word	0x20000174

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_Delay+0x40>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000008 	.word	0x20000008

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff29 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff3e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b2:	e17f      	b.n	80024b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8171 	beq.w	80024ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d00b      	beq.n	80021ec <HAL_GPIO_Init+0x48>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d007      	beq.n	80021ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e0:	2b11      	cmp	r3, #17
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d130      	bne.n	800224e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002222:	2201      	movs	r2, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 0201 	and.w	r2, r3, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b03      	cmp	r3, #3
 8002258:	d118      	bne.n	800228c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x128>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80ac 	beq.w	80024ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_GPIO_Init+0x32c>)
 8002358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235a:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_GPIO_Init+0x32c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6613      	str	r3, [r2, #96]	; 0x60
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x32c>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236e:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <HAL_GPIO_Init+0x330>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x242>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4e      	ldr	r2, [pc, #312]	; (80024d8 <HAL_GPIO_Init+0x334>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <HAL_GPIO_Init+0x338>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <HAL_GPIO_Init+0x33c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4b      	ldr	r2, [pc, #300]	; (80024e4 <HAL_GPIO_Init+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <HAL_GPIO_Init+0x344>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a49      	ldr	r2, [pc, #292]	; (80024ec <HAL_GPIO_Init+0x348>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x22a>
 80023ca:	2306      	movs	r3, #6
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023ce:	2307      	movs	r3, #7
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023e6:	2300      	movs	r3, #0
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f8:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_GPIO_Init+0x330>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002406:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242a:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002430:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a8:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f47f ae78 	bne.w	80021b4 <HAL_GPIO_Init+0x10>
  }
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000800 	.word	0x48000800
 80024e0:	48000c00 	.word	0x48000c00
 80024e4:	48001000 	.word	0x48001000
 80024e8:	48001400 	.word	0x48001400
 80024ec:	48001800 	.word	0x48001800
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002510:	e002      	b.n	8002518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_PWREx_GetVoltageRange+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d130      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d038      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2232      	movs	r2, #50	; 0x32
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002584:	e002      	b.n	800258c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d102      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f2      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d110      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d007      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000
 80025e4:	20000000 	.word	0x20000000
 80025e8:	431bde83 	.word	0x431bde83

080025ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e3d4      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4ba1      	ldr	r3, [pc, #644]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80e4 	beq.w	80027e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x4a>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f040 808b 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8087 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002636:	4b93      	ldr	r3, [pc, #588]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3ac      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCC_OscConfig+0x7c>
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002666:	e005      	b.n	8002674 <HAL_RCC_OscConfig+0x88>
 8002668:	4b86      	ldr	r3, [pc, #536]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002674:	4293      	cmp	r3, r2
 8002676:	d223      	bcs.n	80026c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd07 	bl	8003090 <RCC_SetFlashLatencyFromMSIRange>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e38d      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268c:	4b7d      	ldr	r3, [pc, #500]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7c      	ldr	r2, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b7a      	ldr	r3, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4977      	ldr	r1, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	4972      	ldr	r1, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e025      	b.n	800270c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6f      	ldr	r2, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	496a      	ldr	r1, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026de:	4b69      	ldr	r3, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4965      	ldr	r1, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fcc7 	bl	8003090 <RCC_SetFlashLatencyFromMSIRange>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e34d      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270c:	f000 fc36 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002710:	4601      	mov	r1, r0
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x29c>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa21 f303 	lsr.w	r3, r1, r3
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x2a0>)
 800272a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_OscConfig+0x2a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fba7 	bl	8001e84 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d052      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	e331      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002758:	f7ff fbe4 	bl	8001f24 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7ff fbe0 	bl	8001f24 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e31a      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002772:	4b44      	ldr	r3, [pc, #272]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	493b      	ldr	r1, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e01a      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a33      	ldr	r2, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f7ff fbb1 	bl	8001f24 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c6:	f7ff fbad 	bl	8001f24 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2e7      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1da>
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d074      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x21a>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d064      	beq.n	80028dc <HAL_RCC_OscConfig+0x2f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d160      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e2c4      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x24a>
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e01d      	b.n	8002872 <HAL_RCC_OscConfig+0x286>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x26e>
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x286>
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x298>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff fb53 	bl	8001f24 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	080052f0 	.word	0x080052f0
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff fb46 	bl	8001f24 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e280      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4baf      	ldr	r3, [pc, #700]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2a8>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fb36 	bl	8001f24 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fb32 	bl	8001f24 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e26c      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d060      	beq.n	80029ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x310>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d119      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	4b99      	ldr	r3, [pc, #612]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x328>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e249      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b93      	ldr	r3, [pc, #588]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4990      	ldr	r1, [pc, #576]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	e040      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a8b      	ldr	r2, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7ff faf1 	bl	8001f24 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7ff faed 	bl	8001f24 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e227      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	497c      	ldr	r1, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a79      	ldr	r2, [pc, #484]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff facd 	bl	8001f24 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff fac9 	bl	8001f24 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e203      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01c      	beq.n	80029fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	4a67      	ldr	r2, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7ff faa8 	bl	8001f24 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7ff faa4 	bl	8001f24 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1de      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fa8b 	bl	8001f24 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff fa87 	bl	8001f24 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1c1      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a43      	ldr	r2, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <HAL_RCC_OscConfig+0x57c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a78:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x57c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <HAL_RCC_OscConfig+0x57c>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7ff fa4e 	bl	8001f24 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7ff fa4a 	bl	8001f24 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e184      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_RCC_OscConfig+0x57c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d8>
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac2:	e024      	b.n	8002b0e <HAL_RCC_OscConfig+0x522>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d110      	bne.n	8002aee <HAL_RCC_OscConfig+0x502>
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	e00f      	b.n	8002b0e <HAL_RCC_OscConfig+0x522>
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7ff fa05 	bl	8001f24 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7ff fa01 	bl	8001f24 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e139      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x578>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ed      	beq.n	8002b1e <HAL_RCC_OscConfig+0x532>
 8002b42:	e01a      	b.n	8002b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7ff f9ee 	bl	8001f24 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4a:	e00f      	b.n	8002b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff f9ea 	bl	8001f24 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d906      	bls.n	8002b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e122      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b90      	ldr	r3, [pc, #576]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e8      	bne.n	8002b4c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	4a8a      	ldr	r2, [pc, #552]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8108 	beq.w	8002da6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f040 80d0 	bne.w	8002d40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba0:	4b83      	ldr	r3, [pc, #524]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d130      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d127      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be0:	2a07      	cmp	r2, #7
 8002be2:	bf14      	ite	ne
 8002be4:	2201      	movne	r2, #1
 8002be6:	2200      	moveq	r2, #0
 8002be8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d06e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d069      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1c:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b7      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5c      	ldr	r2, [pc, #368]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7ff f96e 	bl	8001f24 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7ff f96a 	bl	8001f24 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0a4      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x7c8>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0652      	lsls	r2, r2, #25
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca4:	0912      	lsrs	r2, r2, #4
 8002ca6:	0452      	lsls	r2, r2, #17
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4941      	ldr	r1, [pc, #260]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3e      	ldr	r2, [pc, #248]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a3b      	ldr	r2, [pc, #236]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc8:	f7ff f92c 	bl	8001f24 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f928 	bl	8001f24 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e062      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cee:	e05a      	b.n	8002da6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e059      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d152      	bne.n	8002da6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d18:	f7ff f904 	bl	8001f24 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff f900 	bl	8001f24 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e03a      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x734>
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d02d      	beq.n	8002da2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	f023 0303 	bic.w	r3, r3, #3
 8002d68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7ff f8d3 	bl	8001f24 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7ff f8cf 	bl	8001f24 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e009      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x7c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x796>
 8002da0:	e001      	b.n	8002da6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	f99d808c 	.word	0xf99d808c

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0c8      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 0207 	bic.w	r2, r3, #7
 8002de2:	4961      	ldr	r1, [pc, #388]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b0      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d04c      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e10:	4b56      	ldr	r3, [pc, #344]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d121      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e09e      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d115      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e092      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e086      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e50:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e07e      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 0203 	bic.w	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	493f      	ldr	r1, [pc, #252]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e72:	f7ff f857 	bl	8001f24 <HAL_GetTick>
 8002e76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7a:	f7ff f853 	bl	8001f24 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e066      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e90:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 020c 	and.w	r2, r3, #12
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d1eb      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	492c      	ldr	r1, [pc, #176]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4924      	ldr	r1, [pc, #144]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e036      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4918      	ldr	r1, [pc, #96]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4910      	ldr	r1, [pc, #64]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2e:	f000 f825 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_ClockConfig+0x1b4>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	fa21 f303 	lsr.w	r3, r1, r3
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe ff96 	bl	8001e84 <HAL_InitTick>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	080052f0 	.word	0x080052f0
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11e      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e004      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8003002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d133      	bne.n	8003072 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xa4>
 800301a:	2b03      	cmp	r3, #3
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0xaa>
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003022:	617b      	str	r3, [r7, #20]
      break;
 8003024:	e005      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	617b      	str	r3, [r7, #20]
      break;
 8003030:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	3301      	adds	r3, #1
 800303e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	fb02 f203 	mul.w	r2, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_GetSysClockFreq+0x104>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0e5b      	lsrs	r3, r3, #25
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003072:	69bb      	ldr	r3, [r7, #24]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3724      	adds	r7, #36	; 0x24
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40021000 	.word	0x40021000
 8003084:	08005300 	.word	0x08005300
 8003088:	00f42400 	.word	0x00f42400
 800308c:	007a1200 	.word	0x007a1200

08003090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff fa3c 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
 80030ae:	e014      	b.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030c8:	f7ff fa2c 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 80030cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d10b      	bne.n	80030fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d919      	bls.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2ba0      	cmp	r3, #160	; 0xa0
 80030ec:	d902      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ee:	2302      	movs	r3, #2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e013      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f4:	2301      	movs	r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	e010      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d902      	bls.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003100:	2303      	movs	r3, #3
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e00a      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d102      	bne.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800310c:	2302      	movs	r3, #2
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e004      	b.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b70      	cmp	r3, #112	; 0x70
 8003116:	d101      	bne.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003118:	2301      	movs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	4909      	ldr	r1, [pc, #36]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	40022000 	.word	0x40022000

08003150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e049      	b.n	80031f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe fc5e 	bl	8001a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 fe9c 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_TIM_PWM_Start+0x24>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e03c      	b.n	800329e <HAL_TIM_PWM_Start+0x9e>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d109      	bne.n	800323e <HAL_TIM_PWM_Start+0x3e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e02f      	b.n	800329e <HAL_TIM_PWM_Start+0x9e>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start+0x58>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e022      	b.n	800329e <HAL_TIM_PWM_Start+0x9e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d109      	bne.n	8003272 <HAL_TIM_PWM_Start+0x72>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e015      	b.n	800329e <HAL_TIM_PWM_Start+0x9e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b10      	cmp	r3, #16
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x8c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e008      	b.n	800329e <HAL_TIM_PWM_Start+0x9e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e09c      	b.n	80033e0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xb6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	e023      	b.n	80032fe <HAL_TIM_PWM_Start+0xfe>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0xc6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	e01b      	b.n	80032fe <HAL_TIM_PWM_Start+0xfe>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xd6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	e013      	b.n	80032fe <HAL_TIM_PWM_Start+0xfe>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xe6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e4:	e00b      	b.n	80032fe <HAL_TIM_PWM_Start+0xfe>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0xf6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f4:	e003      	b.n	80032fe <HAL_TIM_PWM_Start+0xfe>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	6839      	ldr	r1, [r7, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fa74 	bl	80047f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_TIM_PWM_Start+0x13e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_TIM_PWM_Start+0x1ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIM_PWM_Start+0x13e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_TIM_PWM_Start+0x1f0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIM_PWM_Start+0x13e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_TIM_PWM_Start+0x1f4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIM_PWM_Start+0x13e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_TIM_PWM_Start+0x1f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_TIM_PWM_Start+0x142>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_TIM_PWM_Start+0x144>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_TIM_PWM_Start+0x1e8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d018      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_TIM_PWM_Start+0x1fc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIM_PWM_Start+0x200>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_TIM_PWM_Start+0x204>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_TIM_PWM_Start+0x1ec>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIM_PWM_Start+0x19e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <HAL_TIM_PWM_Start+0x1f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d115      	bne.n	80033ca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_TIM_PWM_Start+0x208>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d015      	beq.n	80033dc <HAL_TIM_PWM_Start+0x1dc>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d011      	beq.n	80033dc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c8:	e008      	b.n	80033dc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e000      	b.n	80033de <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	00010007 	.word	0x00010007

0800340c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	6839      	ldr	r1, [r7, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f9e8 	bl	80047f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3e      	ldr	r2, [pc, #248]	; (8003524 <HAL_TIM_PWM_Stop+0x118>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_TIM_PWM_Stop+0x4a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <HAL_TIM_PWM_Stop+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIM_PWM_Stop+0x4a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3b      	ldr	r2, [pc, #236]	; (800352c <HAL_TIM_PWM_Stop+0x120>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_TIM_PWM_Stop+0x4a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <HAL_TIM_PWM_Stop+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIM_PWM_Stop+0x4a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_TIM_PWM_Stop+0x128>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_Stop+0x4e>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_TIM_PWM_Stop+0x50>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a1a      	ldr	r2, [r3, #32]
 8003466:	f241 1311 	movw	r3, #4369	; 0x1111
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10f      	bne.n	8003490 <HAL_TIM_PWM_Stop+0x84>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	f240 4344 	movw	r3, #1092	; 0x444
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_TIM_PWM_Stop+0x84>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	f241 1311 	movw	r3, #4369	; 0x1111
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_TIM_PWM_Stop+0xb4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	f240 4344 	movw	r3, #1092	; 0x444
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_PWM_Stop+0xb4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_TIM_PWM_Stop+0xc4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ce:	e023      	b.n	8003518 <HAL_TIM_PWM_Stop+0x10c>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d104      	bne.n	80034e0 <HAL_TIM_PWM_Stop+0xd4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034de:	e01b      	b.n	8003518 <HAL_TIM_PWM_Stop+0x10c>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d104      	bne.n	80034f0 <HAL_TIM_PWM_Stop+0xe4>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ee:	e013      	b.n	8003518 <HAL_TIM_PWM_Stop+0x10c>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d104      	bne.n	8003500 <HAL_TIM_PWM_Stop+0xf4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fe:	e00b      	b.n	8003518 <HAL_TIM_PWM_Stop+0x10c>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d104      	bne.n	8003510 <HAL_TIM_PWM_Stop+0x104>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350e:	e003      	b.n	8003518 <HAL_TIM_PWM_Stop+0x10c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40013400 	.word	0x40013400
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800

08003538 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e049      	b.n	80035de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe fa12 	bl	8001988 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fca8 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0x1a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e023      	b.n	800364a <HAL_TIM_IC_Start_IT+0x62>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d104      	bne.n	8003612 <HAL_TIM_IC_Start_IT+0x2a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e01b      	b.n	800364a <HAL_TIM_IC_Start_IT+0x62>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d104      	bne.n	8003622 <HAL_TIM_IC_Start_IT+0x3a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e013      	b.n	800364a <HAL_TIM_IC_Start_IT+0x62>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d104      	bne.n	8003632 <HAL_TIM_IC_Start_IT+0x4a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e00b      	b.n	800364a <HAL_TIM_IC_Start_IT+0x62>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0x5a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e003      	b.n	800364a <HAL_TIM_IC_Start_IT+0x62>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003648:	b2db      	uxtb	r3, r3
 800364a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_TIM_IC_Start_IT+0x74>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e013      	b.n	8003684 <HAL_TIM_IC_Start_IT+0x9c>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b04      	cmp	r3, #4
 8003660:	d104      	bne.n	800366c <HAL_TIM_IC_Start_IT+0x84>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e00b      	b.n	8003684 <HAL_TIM_IC_Start_IT+0x9c>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d104      	bne.n	800367c <HAL_TIM_IC_Start_IT+0x94>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e003      	b.n	8003684 <HAL_TIM_IC_Start_IT+0x9c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0d8      	b.n	8003848 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Start_IT+0xbe>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	e023      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x106>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_IC_Start_IT+0xce>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b4:	e01b      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x106>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0xde>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	e013      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x106>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_IC_Start_IT+0xee>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d4:	e00b      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x106>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_IC_Start_IT+0xfe>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	e003      	b.n	80036ee <HAL_TIM_IC_Start_IT+0x106>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x116>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036fc:	e013      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x13e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d104      	bne.n	800370e <HAL_TIM_IC_Start_IT+0x126>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370c:	e00b      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x13e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d104      	bne.n	800371e <HAL_TIM_IC_Start_IT+0x136>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800371c:	e003      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x13e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d841      	bhi.n	80037b0 <HAL_TIM_IC_Start_IT+0x1c8>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_TIM_IC_Start_IT+0x14c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	080037b1 	.word	0x080037b1
 800373c:	080037b1 	.word	0x080037b1
 8003740:	080037b1 	.word	0x080037b1
 8003744:	0800377b 	.word	0x0800377b
 8003748:	080037b1 	.word	0x080037b1
 800374c:	080037b1 	.word	0x080037b1
 8003750:	080037b1 	.word	0x080037b1
 8003754:	0800378d 	.word	0x0800378d
 8003758:	080037b1 	.word	0x080037b1
 800375c:	080037b1 	.word	0x080037b1
 8003760:	080037b1 	.word	0x080037b1
 8003764:	0800379f 	.word	0x0800379f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0202 	orr.w	r2, r2, #2
 8003776:	60da      	str	r2, [r3, #12]
      break;
 8003778:	e01b      	b.n	80037b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0204 	orr.w	r2, r2, #4
 8003788:	60da      	str	r2, [r3, #12]
      break;
 800378a:	e012      	b.n	80037b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	60da      	str	r2, [r3, #12]
      break;
 800379c:	e009      	b.n	80037b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0210 	orr.w	r2, r2, #16
 80037ac:	60da      	str	r2, [r3, #12]
      break;
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80037b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f81a 	bl	80047f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_TIM_IC_Start_IT+0x268>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01d      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d018      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_TIM_IC_Start_IT+0x26c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <HAL_TIM_IC_Start_IT+0x270>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_TIM_IC_Start_IT+0x274>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_TIM_IC_Start_IT+0x278>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIM_IC_Start_IT+0x21e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_TIM_IC_Start_IT+0x27c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d115      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <HAL_TIM_IC_Start_IT+0x280>)
 800380e:	4013      	ands	r3, r2
 8003810:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b06      	cmp	r3, #6
 8003816:	d015      	beq.n	8003844 <HAL_TIM_IC_Start_IT+0x25c>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d011      	beq.n	8003844 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	e008      	b.n	8003844 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e000      	b.n	8003846 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40013400 	.word	0x40013400
 8003864:	40014000 	.word	0x40014000
 8003868:	00010007 	.word	0x00010007

0800386c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe f9d2 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 faea 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 faf1 	bl	8003ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0204 	mvn.w	r2, #4
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe f9a8 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fac0 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fac7 	bl	8003ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe f97e 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa96 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa9d 	bl	8003ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0210 	mvn.w	r2, #16
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2208      	movs	r2, #8
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f954 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa6c 	bl	8003e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa73 	bl	8003ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0201 	mvn.w	r2, #1
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa46 	bl	8003e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 ffa4 	bl	8004964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 ff97 	bl	8004978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa21 	bl	8003eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d107      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0220 	mvn.w	r2, #32
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 ff57 	bl	8004950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e082      	b.n	8003bca <HAL_TIM_IC_ConfigChannel+0x120>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11b      	bne.n	8003b0a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 fd63 	bl	80045ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 020c 	bic.w	r2, r2, #12
 8003af4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6999      	ldr	r1, [r3, #24]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
 8003b08:	e05a      	b.n	8003bc0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d11c      	bne.n	8003b4a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f000 fdb2 	bl	8004688 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b32:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	021a      	lsls	r2, r3, #8
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e03a      	b.n	8003bc0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f000 fdcf 	bl	8004702 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 020c 	bic.w	r2, r2, #12
 8003b72:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69d9      	ldr	r1, [r3, #28]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	61da      	str	r2, [r3, #28]
 8003b86:	e01b      	b.n	8003bc0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f000 fdef 	bl	800477a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003baa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69d9      	ldr	r1, [r3, #28]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0fd      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x216>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b14      	cmp	r3, #20
 8003bfa:	f200 80f0 	bhi.w	8003dde <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003ddf 	.word	0x08003ddf
 8003c0c:	08003ddf 	.word	0x08003ddf
 8003c10:	08003ddf 	.word	0x08003ddf
 8003c14:	08003c99 	.word	0x08003c99
 8003c18:	08003ddf 	.word	0x08003ddf
 8003c1c:	08003ddf 	.word	0x08003ddf
 8003c20:	08003ddf 	.word	0x08003ddf
 8003c24:	08003cdb 	.word	0x08003cdb
 8003c28:	08003ddf 	.word	0x08003ddf
 8003c2c:	08003ddf 	.word	0x08003ddf
 8003c30:	08003ddf 	.word	0x08003ddf
 8003c34:	08003d1b 	.word	0x08003d1b
 8003c38:	08003ddf 	.word	0x08003ddf
 8003c3c:	08003ddf 	.word	0x08003ddf
 8003c40:	08003ddf 	.word	0x08003ddf
 8003c44:	08003d5d 	.word	0x08003d5d
 8003c48:	08003ddf 	.word	0x08003ddf
 8003c4c:	08003ddf 	.word	0x08003ddf
 8003c50:	08003ddf 	.word	0x08003ddf
 8003c54:	08003d9d 	.word	0x08003d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f9ce 	bl	8004000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
      break;
 8003c96:	e0a3      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fa3e 	bl	8004120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6999      	ldr	r1, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	619a      	str	r2, [r3, #24]
      break;
 8003cd8:	e082      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 faa7 	bl	8004234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0208 	orr.w	r2, r2, #8
 8003cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0204 	bic.w	r2, r2, #4
 8003d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
      break;
 8003d18:	e062      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fb0f 	bl	8004344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	61da      	str	r2, [r3, #28]
      break;
 8003d5a:	e041      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb58 	bl	8004418 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0208 	orr.w	r2, r2, #8
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0204 	bic.w	r2, r2, #4
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d9a:	e021      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fb9c 	bl	80044e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ddc:	e000      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d831      	bhi.n	8003e6c <HAL_TIM_ReadCapturedValue+0x78>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e6d 	.word	0x08003e6d
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e4f 	.word	0x08003e4f
 8003e24:	08003e6d 	.word	0x08003e6d
 8003e28:	08003e6d 	.word	0x08003e6d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e63 	.word	0x08003e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	60fb      	str	r3, [r7, #12]

      break;
 8003e4c:	e00f      	b.n	8003e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	60fb      	str	r3, [r7, #12]

      break;
 8003e56:	e00a      	b.n	8003e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	60fb      	str	r3, [r7, #12]

      break;
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	60fb      	str	r3, [r7, #12]

      break;
 8003e6a:	e000      	b.n	8003e6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e6c:	bf00      	nop
  }

  return tmpreg;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a40      	ldr	r2, [pc, #256]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d00f      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3d      	ldr	r2, [pc, #244]	; (8003fe4 <TIM_Base_SetConfig+0x118>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3c      	ldr	r2, [pc, #240]	; (8003fe8 <TIM_Base_SetConfig+0x11c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <TIM_Base_SetConfig+0x120>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d108      	bne.n	8003f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d01b      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <TIM_Base_SetConfig+0x118>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d017      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <TIM_Base_SetConfig+0x11c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <TIM_Base_SetConfig+0x120>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <TIM_Base_SetConfig+0x128>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <TIM_Base_SetConfig+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0302 	bic.w	r3, r3, #2
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_OC1_SetConfig+0x10c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_OC1_SetConfig+0x110>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_OC1_SetConfig+0x114>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_OC1_SetConfig+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_OC1_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <TIM_OC1_SetConfig+0x10c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00f      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <TIM_OC1_SetConfig+0x110>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <TIM_OC1_SetConfig+0x114>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a18      	ldr	r2, [pc, #96]	; (8004118 <TIM_OC1_SetConfig+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC1_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800

08004120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a28      	ldr	r2, [pc, #160]	; (8004220 <TIM_OC2_SetConfig+0x100>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a27      	ldr	r2, [pc, #156]	; (8004224 <TIM_OC2_SetConfig+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_OC2_SetConfig+0x100>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00f      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <TIM_OC2_SetConfig+0x104>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <TIM_OC2_SetConfig+0x108>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	; (800422c <TIM_OC2_SetConfig+0x10c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <TIM_OC2_SetConfig+0x110>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d113      	bne.n	80041f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_OC3_SetConfig+0xfc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_OC3_SetConfig+0x6a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_OC3_SetConfig+0x100>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10d      	bne.n	80042ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_OC3_SetConfig+0xfc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <TIM_OC3_SetConfig+0x100>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <TIM_OC3_SetConfig+0x104>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <TIM_OC3_SetConfig+0x108>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <TIM_OC3_SetConfig+0x10c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d113      	bne.n	800430a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <TIM_OC4_SetConfig+0xc0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <TIM_OC4_SetConfig+0xc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <TIM_OC4_SetConfig+0xc8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <TIM_OC4_SetConfig+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <TIM_OC4_SetConfig+0xd0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d109      	bne.n	80043dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800445c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <TIM_OC5_SetConfig+0xb4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <TIM_OC5_SetConfig+0xb8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <TIM_OC5_SetConfig+0xbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <TIM_OC5_SetConfig+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <TIM_OC5_SetConfig+0xc4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d109      	bne.n	80044a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800

080044e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	051b      	lsls	r3, r3, #20
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <TIM_OC6_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <TIM_OC6_SetConfig+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <TIM_OC6_SetConfig+0xc0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <TIM_OC6_SetConfig+0xc4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <TIM_OC6_SetConfig+0xc8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <TIM_TI1_SetConfig+0xc4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d017      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d013      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <TIM_TI1_SetConfig+0xc8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00f      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <TIM_TI1_SetConfig+0xcc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_TI1_SetConfig+0xd0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a20      	ldr	r2, [pc, #128]	; (8004680 <TIM_TI1_SetConfig+0xd4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_TI1_SetConfig+0x5e>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <TIM_TI1_SetConfig+0xd8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <TIM_TI1_SetConfig+0x62>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <TIM_TI1_SetConfig+0x64>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e003      	b.n	800462e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	b2db      	uxtb	r3, r3
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 030a 	bic.w	r3, r3, #10
 8004648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 030a 	and.w	r3, r3, #10
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40013400 	.word	0x40013400
 8004684:	40014000 	.word	0x40014000

08004688 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	031b      	lsls	r3, r3, #12
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004702:	b480      	push	{r7}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800473e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	b2db      	uxtb	r3, r3
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004752:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	031b      	lsls	r3, r3, #12
 80047be:	b29b      	uxth	r3, r3
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2201      	movs	r2, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e068      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2d      	ldr	r2, [pc, #180]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01d      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d018      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a14      	ldr	r2, [pc, #80]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40014000 	.word	0x40014000

08004950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4e0d      	ldr	r6, [pc, #52]	; (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 800499e:	1ba4      	subs	r4, r4, r6
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2500      	movs	r5, #0
 80049a4:	42a5      	cmp	r5, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4e0b      	ldr	r6, [pc, #44]	; (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	; (80049dc <__libc_init_array+0x44>)
 80049ac:	f000 fc26 	bl	80051fc <_init>
 80049b0:	1ba4      	subs	r4, r4, r6
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2500      	movs	r5, #0
 80049b6:	42a5      	cmp	r5, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c0:	4798      	blx	r3
 80049c2:	3501      	adds	r5, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ca:	4798      	blx	r3
 80049cc:	3501      	adds	r5, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005364 	.word	0x08005364
 80049d4:	08005364 	.word	0x08005364
 80049d8:	08005364 	.word	0x08005364
 80049dc:	08005368 	.word	0x08005368

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <siprintf>:
 80049f0:	b40e      	push	{r1, r2, r3}
 80049f2:	b500      	push	{lr}
 80049f4:	b09c      	sub	sp, #112	; 0x70
 80049f6:	ab1d      	add	r3, sp, #116	; 0x74
 80049f8:	9002      	str	r0, [sp, #8]
 80049fa:	9006      	str	r0, [sp, #24]
 80049fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a00:	4809      	ldr	r0, [pc, #36]	; (8004a28 <siprintf+0x38>)
 8004a02:	9107      	str	r1, [sp, #28]
 8004a04:	9104      	str	r1, [sp, #16]
 8004a06:	4909      	ldr	r1, [pc, #36]	; (8004a2c <siprintf+0x3c>)
 8004a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a0c:	9105      	str	r1, [sp, #20]
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	a902      	add	r1, sp, #8
 8004a14:	f000 f866 	bl	8004ae4 <_svfiprintf_r>
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	b01c      	add	sp, #112	; 0x70
 8004a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a24:	b003      	add	sp, #12
 8004a26:	4770      	bx	lr
 8004a28:	2000000c 	.word	0x2000000c
 8004a2c:	ffff0208 	.word	0xffff0208

08004a30 <__ssputs_r>:
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	688e      	ldr	r6, [r1, #8]
 8004a36:	429e      	cmp	r6, r3
 8004a38:	4682      	mov	sl, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4690      	mov	r8, r2
 8004a3e:	4699      	mov	r9, r3
 8004a40:	d837      	bhi.n	8004ab2 <__ssputs_r+0x82>
 8004a42:	898a      	ldrh	r2, [r1, #12]
 8004a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a48:	d031      	beq.n	8004aae <__ssputs_r+0x7e>
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	6909      	ldr	r1, [r1, #16]
 8004a4e:	1a6f      	subs	r7, r5, r1
 8004a50:	6965      	ldr	r5, [r4, #20]
 8004a52:	2302      	movs	r3, #2
 8004a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a58:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a5c:	f109 0301 	add.w	r3, r9, #1
 8004a60:	443b      	add	r3, r7
 8004a62:	429d      	cmp	r5, r3
 8004a64:	bf38      	it	cc
 8004a66:	461d      	movcc	r5, r3
 8004a68:	0553      	lsls	r3, r2, #21
 8004a6a:	d530      	bpl.n	8004ace <__ssputs_r+0x9e>
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	f000 fb2b 	bl	80050c8 <_malloc_r>
 8004a72:	4606      	mov	r6, r0
 8004a74:	b950      	cbnz	r0, 8004a8c <__ssputs_r+0x5c>
 8004a76:	230c      	movs	r3, #12
 8004a78:	f8ca 3000 	str.w	r3, [sl]
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	6921      	ldr	r1, [r4, #16]
 8004a90:	f000 faa8 	bl	8004fe4 <memcpy>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	6126      	str	r6, [r4, #16]
 8004aa2:	6165      	str	r5, [r4, #20]
 8004aa4:	443e      	add	r6, r7
 8004aa6:	1bed      	subs	r5, r5, r7
 8004aa8:	6026      	str	r6, [r4, #0]
 8004aaa:	60a5      	str	r5, [r4, #8]
 8004aac:	464e      	mov	r6, r9
 8004aae:	454e      	cmp	r6, r9
 8004ab0:	d900      	bls.n	8004ab4 <__ssputs_r+0x84>
 8004ab2:	464e      	mov	r6, r9
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	f000 fa9e 	bl	8004ffa <memmove>
 8004abe:	68a3      	ldr	r3, [r4, #8]
 8004ac0:	1b9b      	subs	r3, r3, r6
 8004ac2:	60a3      	str	r3, [r4, #8]
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	441e      	add	r6, r3
 8004ac8:	6026      	str	r6, [r4, #0]
 8004aca:	2000      	movs	r0, #0
 8004acc:	e7dc      	b.n	8004a88 <__ssputs_r+0x58>
 8004ace:	462a      	mov	r2, r5
 8004ad0:	f000 fb54 	bl	800517c <_realloc_r>
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d1e2      	bne.n	8004aa0 <__ssputs_r+0x70>
 8004ada:	6921      	ldr	r1, [r4, #16]
 8004adc:	4650      	mov	r0, sl
 8004ade:	f000 faa5 	bl	800502c <_free_r>
 8004ae2:	e7c8      	b.n	8004a76 <__ssputs_r+0x46>

08004ae4 <_svfiprintf_r>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	461d      	mov	r5, r3
 8004aea:	898b      	ldrh	r3, [r1, #12]
 8004aec:	061f      	lsls	r7, r3, #24
 8004aee:	b09d      	sub	sp, #116	; 0x74
 8004af0:	4680      	mov	r8, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	4616      	mov	r6, r2
 8004af6:	d50f      	bpl.n	8004b18 <_svfiprintf_r+0x34>
 8004af8:	690b      	ldr	r3, [r1, #16]
 8004afa:	b96b      	cbnz	r3, 8004b18 <_svfiprintf_r+0x34>
 8004afc:	2140      	movs	r1, #64	; 0x40
 8004afe:	f000 fae3 	bl	80050c8 <_malloc_r>
 8004b02:	6020      	str	r0, [r4, #0]
 8004b04:	6120      	str	r0, [r4, #16]
 8004b06:	b928      	cbnz	r0, 8004b14 <_svfiprintf_r+0x30>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	f8c8 3000 	str.w	r3, [r8]
 8004b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b12:	e0c8      	b.n	8004ca6 <_svfiprintf_r+0x1c2>
 8004b14:	2340      	movs	r3, #64	; 0x40
 8004b16:	6163      	str	r3, [r4, #20]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b22:	2330      	movs	r3, #48	; 0x30
 8004b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b28:	9503      	str	r5, [sp, #12]
 8004b2a:	f04f 0b01 	mov.w	fp, #1
 8004b2e:	4637      	mov	r7, r6
 8004b30:	463d      	mov	r5, r7
 8004b32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b36:	b10b      	cbz	r3, 8004b3c <_svfiprintf_r+0x58>
 8004b38:	2b25      	cmp	r3, #37	; 0x25
 8004b3a:	d13e      	bne.n	8004bba <_svfiprintf_r+0xd6>
 8004b3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b40:	d00b      	beq.n	8004b5a <_svfiprintf_r+0x76>
 8004b42:	4653      	mov	r3, sl
 8004b44:	4632      	mov	r2, r6
 8004b46:	4621      	mov	r1, r4
 8004b48:	4640      	mov	r0, r8
 8004b4a:	f7ff ff71 	bl	8004a30 <__ssputs_r>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f000 80a4 	beq.w	8004c9c <_svfiprintf_r+0x1b8>
 8004b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b56:	4453      	add	r3, sl
 8004b58:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5a:	783b      	ldrb	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 809d 	beq.w	8004c9c <_svfiprintf_r+0x1b8>
 8004b62:	2300      	movs	r3, #0
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	9307      	str	r3, [sp, #28]
 8004b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b74:	931a      	str	r3, [sp, #104]	; 0x68
 8004b76:	462f      	mov	r7, r5
 8004b78:	2205      	movs	r2, #5
 8004b7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b7e:	4850      	ldr	r0, [pc, #320]	; (8004cc0 <_svfiprintf_r+0x1dc>)
 8004b80:	f7fb fb36 	bl	80001f0 <memchr>
 8004b84:	9b04      	ldr	r3, [sp, #16]
 8004b86:	b9d0      	cbnz	r0, 8004bbe <_svfiprintf_r+0xda>
 8004b88:	06d9      	lsls	r1, r3, #27
 8004b8a:	bf44      	itt	mi
 8004b8c:	2220      	movmi	r2, #32
 8004b8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b92:	071a      	lsls	r2, r3, #28
 8004b94:	bf44      	itt	mi
 8004b96:	222b      	movmi	r2, #43	; 0x2b
 8004b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b9c:	782a      	ldrb	r2, [r5, #0]
 8004b9e:	2a2a      	cmp	r2, #42	; 0x2a
 8004ba0:	d015      	beq.n	8004bce <_svfiprintf_r+0xea>
 8004ba2:	9a07      	ldr	r2, [sp, #28]
 8004ba4:	462f      	mov	r7, r5
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	250a      	movs	r5, #10
 8004baa:	4639      	mov	r1, r7
 8004bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bb0:	3b30      	subs	r3, #48	; 0x30
 8004bb2:	2b09      	cmp	r3, #9
 8004bb4:	d94d      	bls.n	8004c52 <_svfiprintf_r+0x16e>
 8004bb6:	b1b8      	cbz	r0, 8004be8 <_svfiprintf_r+0x104>
 8004bb8:	e00f      	b.n	8004bda <_svfiprintf_r+0xf6>
 8004bba:	462f      	mov	r7, r5
 8004bbc:	e7b8      	b.n	8004b30 <_svfiprintf_r+0x4c>
 8004bbe:	4a40      	ldr	r2, [pc, #256]	; (8004cc0 <_svfiprintf_r+0x1dc>)
 8004bc0:	1a80      	subs	r0, r0, r2
 8004bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8004bc6:	4318      	orrs	r0, r3
 8004bc8:	9004      	str	r0, [sp, #16]
 8004bca:	463d      	mov	r5, r7
 8004bcc:	e7d3      	b.n	8004b76 <_svfiprintf_r+0x92>
 8004bce:	9a03      	ldr	r2, [sp, #12]
 8004bd0:	1d11      	adds	r1, r2, #4
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	9103      	str	r1, [sp, #12]
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	db01      	blt.n	8004bde <_svfiprintf_r+0xfa>
 8004bda:	9207      	str	r2, [sp, #28]
 8004bdc:	e004      	b.n	8004be8 <_svfiprintf_r+0x104>
 8004bde:	4252      	negs	r2, r2
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	9207      	str	r2, [sp, #28]
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	783b      	ldrb	r3, [r7, #0]
 8004bea:	2b2e      	cmp	r3, #46	; 0x2e
 8004bec:	d10c      	bne.n	8004c08 <_svfiprintf_r+0x124>
 8004bee:	787b      	ldrb	r3, [r7, #1]
 8004bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf2:	d133      	bne.n	8004c5c <_svfiprintf_r+0x178>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	9203      	str	r2, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfb8      	it	lt
 8004c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c04:	3702      	adds	r7, #2
 8004c06:	9305      	str	r3, [sp, #20]
 8004c08:	4d2e      	ldr	r5, [pc, #184]	; (8004cc4 <_svfiprintf_r+0x1e0>)
 8004c0a:	7839      	ldrb	r1, [r7, #0]
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f7fb faee 	bl	80001f0 <memchr>
 8004c14:	b138      	cbz	r0, 8004c26 <_svfiprintf_r+0x142>
 8004c16:	2340      	movs	r3, #64	; 0x40
 8004c18:	1b40      	subs	r0, r0, r5
 8004c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	4303      	orrs	r3, r0
 8004c22:	3701      	adds	r7, #1
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	7839      	ldrb	r1, [r7, #0]
 8004c28:	4827      	ldr	r0, [pc, #156]	; (8004cc8 <_svfiprintf_r+0x1e4>)
 8004c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c2e:	2206      	movs	r2, #6
 8004c30:	1c7e      	adds	r6, r7, #1
 8004c32:	f7fb fadd 	bl	80001f0 <memchr>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d038      	beq.n	8004cac <_svfiprintf_r+0x1c8>
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <_svfiprintf_r+0x1e8>)
 8004c3c:	bb13      	cbnz	r3, 8004c84 <_svfiprintf_r+0x1a0>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	3307      	adds	r3, #7
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	3308      	adds	r3, #8
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4c:	444b      	add	r3, r9
 8004c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c50:	e76d      	b.n	8004b2e <_svfiprintf_r+0x4a>
 8004c52:	fb05 3202 	mla	r2, r5, r2, r3
 8004c56:	2001      	movs	r0, #1
 8004c58:	460f      	mov	r7, r1
 8004c5a:	e7a6      	b.n	8004baa <_svfiprintf_r+0xc6>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	3701      	adds	r7, #1
 8004c60:	9305      	str	r3, [sp, #20]
 8004c62:	4619      	mov	r1, r3
 8004c64:	250a      	movs	r5, #10
 8004c66:	4638      	mov	r0, r7
 8004c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c6c:	3a30      	subs	r2, #48	; 0x30
 8004c6e:	2a09      	cmp	r2, #9
 8004c70:	d903      	bls.n	8004c7a <_svfiprintf_r+0x196>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0c8      	beq.n	8004c08 <_svfiprintf_r+0x124>
 8004c76:	9105      	str	r1, [sp, #20]
 8004c78:	e7c6      	b.n	8004c08 <_svfiprintf_r+0x124>
 8004c7a:	fb05 2101 	mla	r1, r5, r1, r2
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4607      	mov	r7, r0
 8004c82:	e7f0      	b.n	8004c66 <_svfiprintf_r+0x182>
 8004c84:	ab03      	add	r3, sp, #12
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <_svfiprintf_r+0x1ec>)
 8004c8c:	a904      	add	r1, sp, #16
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f3af 8000 	nop.w
 8004c94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c98:	4681      	mov	r9, r0
 8004c9a:	d1d6      	bne.n	8004c4a <_svfiprintf_r+0x166>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	065b      	lsls	r3, r3, #25
 8004ca0:	f53f af35 	bmi.w	8004b0e <_svfiprintf_r+0x2a>
 8004ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ca6:	b01d      	add	sp, #116	; 0x74
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <_svfiprintf_r+0x1ec>)
 8004cb4:	a904      	add	r1, sp, #16
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f000 f882 	bl	8004dc0 <_printf_i>
 8004cbc:	e7ea      	b.n	8004c94 <_svfiprintf_r+0x1b0>
 8004cbe:	bf00      	nop
 8004cc0:	08005330 	.word	0x08005330
 8004cc4:	08005336 	.word	0x08005336
 8004cc8:	0800533a 	.word	0x0800533a
 8004ccc:	00000000 	.word	0x00000000
 8004cd0:	08004a31 	.word	0x08004a31

08004cd4 <_printf_common>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	4691      	mov	r9, r2
 8004cda:	461f      	mov	r7, r3
 8004cdc:	688a      	ldr	r2, [r1, #8]
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	bfb8      	it	lt
 8004ce8:	4613      	movlt	r3, r2
 8004cea:	f8c9 3000 	str.w	r3, [r9]
 8004cee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	b112      	cbz	r2, 8004cfe <_printf_common+0x2a>
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f8c9 3000 	str.w	r3, [r9]
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	0699      	lsls	r1, r3, #26
 8004d02:	bf42      	ittt	mi
 8004d04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d08:	3302      	addmi	r3, #2
 8004d0a:	f8c9 3000 	strmi.w	r3, [r9]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	f015 0506 	ands.w	r5, r5, #6
 8004d14:	d107      	bne.n	8004d26 <_printf_common+0x52>
 8004d16:	f104 0a19 	add.w	sl, r4, #25
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	42ab      	cmp	r3, r5
 8004d24:	dc28      	bgt.n	8004d78 <_printf_common+0xa4>
 8004d26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	3300      	adds	r3, #0
 8004d2e:	bf18      	it	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	0692      	lsls	r2, r2, #26
 8004d34:	d42d      	bmi.n	8004d92 <_printf_common+0xbe>
 8004d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	47c0      	blx	r8
 8004d40:	3001      	adds	r0, #1
 8004d42:	d020      	beq.n	8004d86 <_printf_common+0xb2>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	68e5      	ldr	r5, [r4, #12]
 8004d48:	f8d9 2000 	ldr.w	r2, [r9]
 8004d4c:	f003 0306 	and.w	r3, r3, #6
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	bf08      	it	eq
 8004d54:	1aad      	subeq	r5, r5, r2
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	6922      	ldr	r2, [r4, #16]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	2500      	movne	r5, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfc4      	itt	gt
 8004d66:	1a9b      	subgt	r3, r3, r2
 8004d68:	18ed      	addgt	r5, r5, r3
 8004d6a:	f04f 0900 	mov.w	r9, #0
 8004d6e:	341a      	adds	r4, #26
 8004d70:	454d      	cmp	r5, r9
 8004d72:	d11a      	bne.n	8004daa <_printf_common+0xd6>
 8004d74:	2000      	movs	r0, #0
 8004d76:	e008      	b.n	8004d8a <_printf_common+0xb6>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4652      	mov	r2, sl
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	4630      	mov	r0, r6
 8004d80:	47c0      	blx	r8
 8004d82:	3001      	adds	r0, #1
 8004d84:	d103      	bne.n	8004d8e <_printf_common+0xba>
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8e:	3501      	adds	r5, #1
 8004d90:	e7c3      	b.n	8004d1a <_printf_common+0x46>
 8004d92:	18e1      	adds	r1, r4, r3
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	2030      	movs	r0, #48	; 0x30
 8004d98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d9c:	4422      	add	r2, r4
 8004d9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004da2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da6:	3302      	adds	r3, #2
 8004da8:	e7c5      	b.n	8004d36 <_printf_common+0x62>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4622      	mov	r2, r4
 8004dae:	4639      	mov	r1, r7
 8004db0:	4630      	mov	r0, r6
 8004db2:	47c0      	blx	r8
 8004db4:	3001      	adds	r0, #1
 8004db6:	d0e6      	beq.n	8004d86 <_printf_common+0xb2>
 8004db8:	f109 0901 	add.w	r9, r9, #1
 8004dbc:	e7d8      	b.n	8004d70 <_printf_common+0x9c>
	...

08004dc0 <_printf_i>:
 8004dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004dc8:	460c      	mov	r4, r1
 8004dca:	7e09      	ldrb	r1, [r1, #24]
 8004dcc:	b085      	sub	sp, #20
 8004dce:	296e      	cmp	r1, #110	; 0x6e
 8004dd0:	4617      	mov	r7, r2
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	4698      	mov	r8, r3
 8004dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dd8:	f000 80b3 	beq.w	8004f42 <_printf_i+0x182>
 8004ddc:	d822      	bhi.n	8004e24 <_printf_i+0x64>
 8004dde:	2963      	cmp	r1, #99	; 0x63
 8004de0:	d036      	beq.n	8004e50 <_printf_i+0x90>
 8004de2:	d80a      	bhi.n	8004dfa <_printf_i+0x3a>
 8004de4:	2900      	cmp	r1, #0
 8004de6:	f000 80b9 	beq.w	8004f5c <_printf_i+0x19c>
 8004dea:	2958      	cmp	r1, #88	; 0x58
 8004dec:	f000 8083 	beq.w	8004ef6 <_printf_i+0x136>
 8004df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004df8:	e032      	b.n	8004e60 <_printf_i+0xa0>
 8004dfa:	2964      	cmp	r1, #100	; 0x64
 8004dfc:	d001      	beq.n	8004e02 <_printf_i+0x42>
 8004dfe:	2969      	cmp	r1, #105	; 0x69
 8004e00:	d1f6      	bne.n	8004df0 <_printf_i+0x30>
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	0605      	lsls	r5, r0, #24
 8004e08:	f103 0104 	add.w	r1, r3, #4
 8004e0c:	d52a      	bpl.n	8004e64 <_printf_i+0xa4>
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da03      	bge.n	8004e1e <_printf_i+0x5e>
 8004e16:	222d      	movs	r2, #45	; 0x2d
 8004e18:	425b      	negs	r3, r3
 8004e1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e1e:	486f      	ldr	r0, [pc, #444]	; (8004fdc <_printf_i+0x21c>)
 8004e20:	220a      	movs	r2, #10
 8004e22:	e039      	b.n	8004e98 <_printf_i+0xd8>
 8004e24:	2973      	cmp	r1, #115	; 0x73
 8004e26:	f000 809d 	beq.w	8004f64 <_printf_i+0x1a4>
 8004e2a:	d808      	bhi.n	8004e3e <_printf_i+0x7e>
 8004e2c:	296f      	cmp	r1, #111	; 0x6f
 8004e2e:	d020      	beq.n	8004e72 <_printf_i+0xb2>
 8004e30:	2970      	cmp	r1, #112	; 0x70
 8004e32:	d1dd      	bne.n	8004df0 <_printf_i+0x30>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	f043 0320 	orr.w	r3, r3, #32
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e003      	b.n	8004e46 <_printf_i+0x86>
 8004e3e:	2975      	cmp	r1, #117	; 0x75
 8004e40:	d017      	beq.n	8004e72 <_printf_i+0xb2>
 8004e42:	2978      	cmp	r1, #120	; 0x78
 8004e44:	d1d4      	bne.n	8004df0 <_printf_i+0x30>
 8004e46:	2378      	movs	r3, #120	; 0x78
 8004e48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e4c:	4864      	ldr	r0, [pc, #400]	; (8004fe0 <_printf_i+0x220>)
 8004e4e:	e055      	b.n	8004efc <_printf_i+0x13c>
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	1d19      	adds	r1, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e60:	2301      	movs	r3, #1
 8004e62:	e08c      	b.n	8004f7e <_printf_i+0x1be>
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6011      	str	r1, [r2, #0]
 8004e68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e6c:	bf18      	it	ne
 8004e6e:	b21b      	sxthne	r3, r3
 8004e70:	e7cf      	b.n	8004e12 <_printf_i+0x52>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	1d18      	adds	r0, r3, #4
 8004e78:	6010      	str	r0, [r2, #0]
 8004e7a:	0628      	lsls	r0, r5, #24
 8004e7c:	d501      	bpl.n	8004e82 <_printf_i+0xc2>
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	e002      	b.n	8004e88 <_printf_i+0xc8>
 8004e82:	0668      	lsls	r0, r5, #25
 8004e84:	d5fb      	bpl.n	8004e7e <_printf_i+0xbe>
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	4854      	ldr	r0, [pc, #336]	; (8004fdc <_printf_i+0x21c>)
 8004e8a:	296f      	cmp	r1, #111	; 0x6f
 8004e8c:	bf14      	ite	ne
 8004e8e:	220a      	movne	r2, #10
 8004e90:	2208      	moveq	r2, #8
 8004e92:	2100      	movs	r1, #0
 8004e94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e98:	6865      	ldr	r5, [r4, #4]
 8004e9a:	60a5      	str	r5, [r4, #8]
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	f2c0 8095 	blt.w	8004fcc <_printf_i+0x20c>
 8004ea2:	6821      	ldr	r1, [r4, #0]
 8004ea4:	f021 0104 	bic.w	r1, r1, #4
 8004ea8:	6021      	str	r1, [r4, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d13d      	bne.n	8004f2a <_printf_i+0x16a>
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	f040 808e 	bne.w	8004fd0 <_printf_i+0x210>
 8004eb4:	4665      	mov	r5, ip
 8004eb6:	2a08      	cmp	r2, #8
 8004eb8:	d10b      	bne.n	8004ed2 <_printf_i+0x112>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d508      	bpl.n	8004ed2 <_printf_i+0x112>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	bfde      	ittt	le
 8004ec8:	2330      	movle	r3, #48	; 0x30
 8004eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ed2:	ebac 0305 	sub.w	r3, ip, r5
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	f8cd 8000 	str.w	r8, [sp]
 8004edc:	463b      	mov	r3, r7
 8004ede:	aa03      	add	r2, sp, #12
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff fef6 	bl	8004cd4 <_printf_common>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d14d      	bne.n	8004f88 <_printf_i+0x1c8>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	b005      	add	sp, #20
 8004ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ef6:	4839      	ldr	r0, [pc, #228]	; (8004fdc <_printf_i+0x21c>)
 8004ef8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004efc:	6813      	ldr	r3, [r2, #0]
 8004efe:	6821      	ldr	r1, [r4, #0]
 8004f00:	1d1d      	adds	r5, r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6015      	str	r5, [r2, #0]
 8004f06:	060a      	lsls	r2, r1, #24
 8004f08:	d50b      	bpl.n	8004f22 <_printf_i+0x162>
 8004f0a:	07ca      	lsls	r2, r1, #31
 8004f0c:	bf44      	itt	mi
 8004f0e:	f041 0120 	orrmi.w	r1, r1, #32
 8004f12:	6021      	strmi	r1, [r4, #0]
 8004f14:	b91b      	cbnz	r3, 8004f1e <_printf_i+0x15e>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	f022 0220 	bic.w	r2, r2, #32
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	e7b7      	b.n	8004e92 <_printf_i+0xd2>
 8004f22:	064d      	lsls	r5, r1, #25
 8004f24:	bf48      	it	mi
 8004f26:	b29b      	uxthmi	r3, r3
 8004f28:	e7ef      	b.n	8004f0a <_printf_i+0x14a>
 8004f2a:	4665      	mov	r5, ip
 8004f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f30:	fb02 3311 	mls	r3, r2, r1, r3
 8004f34:	5cc3      	ldrb	r3, [r0, r3]
 8004f36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d1f5      	bne.n	8004f2c <_printf_i+0x16c>
 8004f40:	e7b9      	b.n	8004eb6 <_printf_i+0xf6>
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	6961      	ldr	r1, [r4, #20]
 8004f48:	1d18      	adds	r0, r3, #4
 8004f4a:	6010      	str	r0, [r2, #0]
 8004f4c:	0628      	lsls	r0, r5, #24
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	d501      	bpl.n	8004f56 <_printf_i+0x196>
 8004f52:	6019      	str	r1, [r3, #0]
 8004f54:	e002      	b.n	8004f5c <_printf_i+0x19c>
 8004f56:	066a      	lsls	r2, r5, #25
 8004f58:	d5fb      	bpl.n	8004f52 <_printf_i+0x192>
 8004f5a:	8019      	strh	r1, [r3, #0]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	4665      	mov	r5, ip
 8004f62:	e7b9      	b.n	8004ed8 <_printf_i+0x118>
 8004f64:	6813      	ldr	r3, [r2, #0]
 8004f66:	1d19      	adds	r1, r3, #4
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	681d      	ldr	r5, [r3, #0]
 8004f6c:	6862      	ldr	r2, [r4, #4]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7fb f93d 	bl	80001f0 <memchr>
 8004f76:	b108      	cbz	r0, 8004f7c <_printf_i+0x1bc>
 8004f78:	1b40      	subs	r0, r0, r5
 8004f7a:	6060      	str	r0, [r4, #4]
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	2300      	movs	r3, #0
 8004f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f86:	e7a7      	b.n	8004ed8 <_printf_i+0x118>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	4630      	mov	r0, r6
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d0aa      	beq.n	8004eec <_printf_i+0x12c>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	079b      	lsls	r3, r3, #30
 8004f9a:	d413      	bmi.n	8004fc4 <_printf_i+0x204>
 8004f9c:	68e0      	ldr	r0, [r4, #12]
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	4298      	cmp	r0, r3
 8004fa2:	bfb8      	it	lt
 8004fa4:	4618      	movlt	r0, r3
 8004fa6:	e7a3      	b.n	8004ef0 <_printf_i+0x130>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	464a      	mov	r2, r9
 8004fac:	4639      	mov	r1, r7
 8004fae:	4630      	mov	r0, r6
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d09a      	beq.n	8004eec <_printf_i+0x12c>
 8004fb6:	3501      	adds	r5, #1
 8004fb8:	68e3      	ldr	r3, [r4, #12]
 8004fba:	9a03      	ldr	r2, [sp, #12]
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	dcf2      	bgt.n	8004fa8 <_printf_i+0x1e8>
 8004fc2:	e7eb      	b.n	8004f9c <_printf_i+0x1dc>
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	f104 0919 	add.w	r9, r4, #25
 8004fca:	e7f5      	b.n	8004fb8 <_printf_i+0x1f8>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ac      	bne.n	8004f2a <_printf_i+0x16a>
 8004fd0:	7803      	ldrb	r3, [r0, #0]
 8004fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fda:	e76c      	b.n	8004eb6 <_printf_i+0xf6>
 8004fdc:	08005341 	.word	0x08005341
 8004fe0:	08005352 	.word	0x08005352

08004fe4 <memcpy>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	1e43      	subs	r3, r0, #1
 8004fe8:	440a      	add	r2, r1
 8004fea:	4291      	cmp	r1, r2
 8004fec:	d100      	bne.n	8004ff0 <memcpy+0xc>
 8004fee:	bd10      	pop	{r4, pc}
 8004ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff8:	e7f7      	b.n	8004fea <memcpy+0x6>

08004ffa <memmove>:
 8004ffa:	4288      	cmp	r0, r1
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	eb01 0302 	add.w	r3, r1, r2
 8005002:	d807      	bhi.n	8005014 <memmove+0x1a>
 8005004:	1e42      	subs	r2, r0, #1
 8005006:	4299      	cmp	r1, r3
 8005008:	d00a      	beq.n	8005020 <memmove+0x26>
 800500a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005012:	e7f8      	b.n	8005006 <memmove+0xc>
 8005014:	4283      	cmp	r3, r0
 8005016:	d9f5      	bls.n	8005004 <memmove+0xa>
 8005018:	1881      	adds	r1, r0, r2
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	42d3      	cmn	r3, r2
 800501e:	d100      	bne.n	8005022 <memmove+0x28>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005026:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800502a:	e7f7      	b.n	800501c <memmove+0x22>

0800502c <_free_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	d045      	beq.n	80050c0 <_free_r+0x94>
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f0c      	subs	r4, r1, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	18e4      	addlt	r4, r4, r3
 8005040:	f000 f8d2 	bl	80051e8 <__malloc_lock>
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <_free_r+0x98>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	4610      	mov	r0, r2
 800504a:	b933      	cbnz	r3, 800505a <_free_r+0x2e>
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	6014      	str	r4, [r2, #0]
 8005050:	4628      	mov	r0, r5
 8005052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005056:	f000 b8c8 	b.w	80051ea <__malloc_unlock>
 800505a:	42a3      	cmp	r3, r4
 800505c:	d90c      	bls.n	8005078 <_free_r+0x4c>
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	1862      	adds	r2, r4, r1
 8005062:	4293      	cmp	r3, r2
 8005064:	bf04      	itt	eq
 8005066:	681a      	ldreq	r2, [r3, #0]
 8005068:	685b      	ldreq	r3, [r3, #4]
 800506a:	6063      	str	r3, [r4, #4]
 800506c:	bf04      	itt	eq
 800506e:	1852      	addeq	r2, r2, r1
 8005070:	6022      	streq	r2, [r4, #0]
 8005072:	6004      	str	r4, [r0, #0]
 8005074:	e7ec      	b.n	8005050 <_free_r+0x24>
 8005076:	4613      	mov	r3, r2
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	b10a      	cbz	r2, 8005080 <_free_r+0x54>
 800507c:	42a2      	cmp	r2, r4
 800507e:	d9fa      	bls.n	8005076 <_free_r+0x4a>
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	1858      	adds	r0, r3, r1
 8005084:	42a0      	cmp	r0, r4
 8005086:	d10b      	bne.n	80050a0 <_free_r+0x74>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	4401      	add	r1, r0
 800508c:	1858      	adds	r0, r3, r1
 800508e:	4282      	cmp	r2, r0
 8005090:	6019      	str	r1, [r3, #0]
 8005092:	d1dd      	bne.n	8005050 <_free_r+0x24>
 8005094:	6810      	ldr	r0, [r2, #0]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	4401      	add	r1, r0
 800509c:	6019      	str	r1, [r3, #0]
 800509e:	e7d7      	b.n	8005050 <_free_r+0x24>
 80050a0:	d902      	bls.n	80050a8 <_free_r+0x7c>
 80050a2:	230c      	movs	r3, #12
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	e7d3      	b.n	8005050 <_free_r+0x24>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	bf04      	itt	eq
 80050b0:	6811      	ldreq	r1, [r2, #0]
 80050b2:	6852      	ldreq	r2, [r2, #4]
 80050b4:	6062      	str	r2, [r4, #4]
 80050b6:	bf04      	itt	eq
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	605c      	str	r4, [r3, #4]
 80050be:	e7c7      	b.n	8005050 <_free_r+0x24>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	200000d4 	.word	0x200000d4

080050c8 <_malloc_r>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	1ccd      	adds	r5, r1, #3
 80050cc:	f025 0503 	bic.w	r5, r5, #3
 80050d0:	3508      	adds	r5, #8
 80050d2:	2d0c      	cmp	r5, #12
 80050d4:	bf38      	it	cc
 80050d6:	250c      	movcc	r5, #12
 80050d8:	2d00      	cmp	r5, #0
 80050da:	4606      	mov	r6, r0
 80050dc:	db01      	blt.n	80050e2 <_malloc_r+0x1a>
 80050de:	42a9      	cmp	r1, r5
 80050e0:	d903      	bls.n	80050ea <_malloc_r+0x22>
 80050e2:	230c      	movs	r3, #12
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	2000      	movs	r0, #0
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	f000 f87d 	bl	80051e8 <__malloc_lock>
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <_malloc_r+0xac>)
 80050f0:	6814      	ldr	r4, [r2, #0]
 80050f2:	4621      	mov	r1, r4
 80050f4:	b991      	cbnz	r1, 800511c <_malloc_r+0x54>
 80050f6:	4c20      	ldr	r4, [pc, #128]	; (8005178 <_malloc_r+0xb0>)
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	b91b      	cbnz	r3, 8005104 <_malloc_r+0x3c>
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f863 	bl	80051c8 <_sbrk_r>
 8005102:	6020      	str	r0, [r4, #0]
 8005104:	4629      	mov	r1, r5
 8005106:	4630      	mov	r0, r6
 8005108:	f000 f85e 	bl	80051c8 <_sbrk_r>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d124      	bne.n	800515a <_malloc_r+0x92>
 8005110:	230c      	movs	r3, #12
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	4630      	mov	r0, r6
 8005116:	f000 f868 	bl	80051ea <__malloc_unlock>
 800511a:	e7e4      	b.n	80050e6 <_malloc_r+0x1e>
 800511c:	680b      	ldr	r3, [r1, #0]
 800511e:	1b5b      	subs	r3, r3, r5
 8005120:	d418      	bmi.n	8005154 <_malloc_r+0x8c>
 8005122:	2b0b      	cmp	r3, #11
 8005124:	d90f      	bls.n	8005146 <_malloc_r+0x7e>
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	50cd      	str	r5, [r1, r3]
 800512a:	18cc      	adds	r4, r1, r3
 800512c:	4630      	mov	r0, r6
 800512e:	f000 f85c 	bl	80051ea <__malloc_unlock>
 8005132:	f104 000b 	add.w	r0, r4, #11
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	f020 0007 	bic.w	r0, r0, #7
 800513c:	1ac3      	subs	r3, r0, r3
 800513e:	d0d3      	beq.n	80050e8 <_malloc_r+0x20>
 8005140:	425a      	negs	r2, r3
 8005142:	50e2      	str	r2, [r4, r3]
 8005144:	e7d0      	b.n	80050e8 <_malloc_r+0x20>
 8005146:	428c      	cmp	r4, r1
 8005148:	684b      	ldr	r3, [r1, #4]
 800514a:	bf16      	itet	ne
 800514c:	6063      	strne	r3, [r4, #4]
 800514e:	6013      	streq	r3, [r2, #0]
 8005150:	460c      	movne	r4, r1
 8005152:	e7eb      	b.n	800512c <_malloc_r+0x64>
 8005154:	460c      	mov	r4, r1
 8005156:	6849      	ldr	r1, [r1, #4]
 8005158:	e7cc      	b.n	80050f4 <_malloc_r+0x2c>
 800515a:	1cc4      	adds	r4, r0, #3
 800515c:	f024 0403 	bic.w	r4, r4, #3
 8005160:	42a0      	cmp	r0, r4
 8005162:	d005      	beq.n	8005170 <_malloc_r+0xa8>
 8005164:	1a21      	subs	r1, r4, r0
 8005166:	4630      	mov	r0, r6
 8005168:	f000 f82e 	bl	80051c8 <_sbrk_r>
 800516c:	3001      	adds	r0, #1
 800516e:	d0cf      	beq.n	8005110 <_malloc_r+0x48>
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	e7db      	b.n	800512c <_malloc_r+0x64>
 8005174:	200000d4 	.word	0x200000d4
 8005178:	200000d8 	.word	0x200000d8

0800517c <_realloc_r>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	4607      	mov	r7, r0
 8005180:	4614      	mov	r4, r2
 8005182:	460e      	mov	r6, r1
 8005184:	b921      	cbnz	r1, 8005190 <_realloc_r+0x14>
 8005186:	4611      	mov	r1, r2
 8005188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800518c:	f7ff bf9c 	b.w	80050c8 <_malloc_r>
 8005190:	b922      	cbnz	r2, 800519c <_realloc_r+0x20>
 8005192:	f7ff ff4b 	bl	800502c <_free_r>
 8005196:	4625      	mov	r5, r4
 8005198:	4628      	mov	r0, r5
 800519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800519c:	f000 f826 	bl	80051ec <_malloc_usable_size_r>
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d20f      	bcs.n	80051c4 <_realloc_r+0x48>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ff8e 	bl	80050c8 <_malloc_r>
 80051ac:	4605      	mov	r5, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0f2      	beq.n	8005198 <_realloc_r+0x1c>
 80051b2:	4631      	mov	r1, r6
 80051b4:	4622      	mov	r2, r4
 80051b6:	f7ff ff15 	bl	8004fe4 <memcpy>
 80051ba:	4631      	mov	r1, r6
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff ff35 	bl	800502c <_free_r>
 80051c2:	e7e9      	b.n	8005198 <_realloc_r+0x1c>
 80051c4:	4635      	mov	r5, r6
 80051c6:	e7e7      	b.n	8005198 <_realloc_r+0x1c>

080051c8 <_sbrk_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4c06      	ldr	r4, [pc, #24]	; (80051e4 <_sbrk_r+0x1c>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4605      	mov	r5, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f7fc fcba 	bl	8001b4c <_sbrk>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_sbrk_r+0x1a>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_sbrk_r+0x1a>
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000178 	.word	0x20000178

080051e8 <__malloc_lock>:
 80051e8:	4770      	bx	lr

080051ea <__malloc_unlock>:
 80051ea:	4770      	bx	lr

080051ec <_malloc_usable_size_r>:
 80051ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f0:	1f18      	subs	r0, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfbc      	itt	lt
 80051f6:	580b      	ldrlt	r3, [r1, r0]
 80051f8:	18c0      	addlt	r0, r0, r3
 80051fa:	4770      	bx	lr

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
